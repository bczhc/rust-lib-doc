var searchIndex = new Map(JSON.parse('[\
["anybase",{"doc":"","t":"HHCHHHFNNNNNNNNNNOONNOONNNNN","n":["base10_to_other","check_mapping_table","cli","map_bytes_to_string","map_string_to_bytes","to_base10","CliConfig","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","from_base","from_table","group_id","into","to_base","to_table","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"anybase"],[6,"anybase::cli"],[28,"num_bigint::biguint"],[29,"alloc::vec"],[30,"anyhow"],[31,"alloc::string"],[32,"clap_builder::builder::command"],[33,"core::fmt"],[34,"core::fmt"],[35,"clap_builder"],[36,"core::result"],[37,"clap_builder::util::id"],[38,"core::option"],[39,"core::any"]],"d":["","","","","","","Convert data base, from stdin to stdout","","","","","","","","Returns the argument unchanged.","","","Input base","Input mapping table; maps bytes to characters","","Calls <code>U::from(self)</code>.","Output base","Output mapping table; maps bytes to characters","","","","",""],"i":[0,0,0,0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"f":"{{bd}{{h{f}}}}{{jd}{{n{l}}}}`{{{A`{f}}{A`{Ab}}}Ad}{{j{A`{Ab}}}{{h{f}}}}{{{A`{f}}d}b}`{AfAf}0{ce{}{}}0{{}Af}0{{AhAj}Al}{cc{}}{An{{Bb{AhB`}}}}0``{{}{{Bf{Bd}}}}5``{c{{Bb{e}}}{}{}}0{cBh{}}{{AhAn}{{Bb{lB`}}}}0","c":[],"p":[[5,"BigUint",28],[1,"u16"],[1,"u8"],[5,"Vec",29],[1,"str"],[1,"unit"],[8,"Result",30],[1,"slice"],[1,"char"],[5,"String",31],[5,"Command",32],[5,"CliConfig",6],[5,"Formatter",33],[8,"Result",33],[5,"ArgMatches",34],[8,"Error",35],[6,"Result",36],[5,"Id",37],[6,"Option",38],[5,"TypeId",39]],"b":[]}],\
["archive",{"doc":"","t":"PPPJJGFPSSFFPSSPGPFFPKPFKPFPFSPPCNNNNNNNNNNNNNNNNNNNNNNEMCNNNNNNNNNNCCCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCNNNNNNNNNNNNNNNNNNNMNNNNNCNNNNNNNNNNNNNNNNNNNNCCNCNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNHPFFFFKKFFFGFFPFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNHHMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNCNNFNNNNNNNNNNNNNNHPPPPPPPGPPPPPPPPPPPPPIGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHFNNNNNNNNONNNNNNHFFFNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNH","n":["Brotli","Bzip2","Bzip3","COMPRESSIONS","COMPRESSION_NAMES","Compression","ContentChecksum","Directory","ENTRY_CRC_32","ENTRY_MAGIC","Entry","EntryChecksum","External","FILE_CRC_64","FILE_MAGIC","Fifo","FileType","Gzip","Header","Info","Link","LocalResultExt","None","Options","OsStrExt","Regular","StreamPipe","Symlink","Timestamp","VERSION","Xz","Zstd","archive","as_str","best_level","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_cli","check","cli","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","compressors","crc","create","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","errors","extract","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_bytes","from_i64","from_i64","from_str","from_u64","from_u64","info","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","line_progress","list","new","reader","serialize","test","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","Archive","add_path","borrow","borrow_mut","deref","deref_mut","drop","drop","flush","from","init","into","new","set_info","try_from","try_into","type_id","write","build_cli","Best","BrotliDecompressor","Bzip2Compressor","Bzip2Decompressor","Bzip3Decompressor","Compress","Decompress","ExternalFilter","GzipCompressor","GzipDecompressor","Level","NoCompressor","NoDecompressor","Numeric","XzCompressor","XzDecompressor","ZstdCompressor","ZstdDecompressor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compress_to","compress_to","compress_to","compress_to","compress_to","compress_to","compress_to","create_compressor","create_decompressor","decompress_to","decompress_to","decompress_to","decompress_to","decompress_to","decompress_to","decompress_to","decompress_to","decompress_to","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new","new","new","new","new","new","to_numeric","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","DigestWriter","borrow","borrow_mut","deref","deref_mut","drop","flush","flush","from","init","into","new","new","try_from","try_into","type_id","write","write","write","CrcFilter","borrow","borrow_mut","deref","deref_mut","drop","flush","from","init","into","new","try_from","try_into","type_id","write","main","AbsolutePath","Ambiguous","Checksum","CompressorError","DecompressorError","Err","Errno","Error","FilterNonZeroExit","FromUtf8","InvalidBaseDir","InvalidCompressor","InvalidEntryHeader","InvalidFileType","InvalidInfoJson","InvalidTime","Io","MissingDecompressor","None","Ok","Others","Result","TimeError","UnknownCompressionMethod","UnknownFileType","WalkDir","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","init","init","into","into","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","main","main","print_info","LineProgress","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","length","message","new","try_from","try_into","type_id","update","main","ArchiveReader","ContentReader","Entries","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chars","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","entries","from","from","from","header","init","init","init","into","into","into","into_iter","lines","new","next","par_bridge","read","read_all","retrieve_content","skip","to_bytes","to_units","to_utf16chars","to_utf8chars","try_from","try_from","try_from","try_into","try_into","try_into","try_read_exact","type_id","type_id","type_id","main"],"q":[[0,"archive"],[198,"archive::archive"],[216,"archive::cli"],[217,"archive::compressors"],[420,"archive::crc"],[439,"archive::crc::write"],[454,"archive::create"],[455,"archive::errors"],[515,"archive::extract"],[516,"archive::info"],[518,"archive::line_progress"],[534,"archive::list"],[535,"archive::reader"],[588,"archive::test"],[589,"core::fmt"],[590,"core::result"],[591,"serde::de"],[592,"std::io::error"],[593,"std::io"],[594,"core::fmt"],[595,"core::option"],[596,"serde::ser"],[597,"alloc::string"],[598,"std::fs"],[599,"core::any"],[600,"std::io"],[601,"core::convert"],[602,"alloc::boxed"],[603,"clap_builder::builder::command"],[604,"std::io"],[605,"crc"],[606,"clap_builder::parser::matches::arg_matches"],[607,"alloc::string"],[608,"walkdir::error"],[609,"core::error"],[610,"bczhc_lib::char"],[611,"bczhc_lib::io"],[612,"rayon::iter::par_bridge"],[613,"encode_unicode::utf8_iterators"],[614,"encode_unicode::utf16_iterators"],[615,"encode_unicode::decoding_iterators"],[616,"encode_unicode::decoding_iterators"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Archive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert raw bytes to OsStr","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","add a path record","","","","","finalize the archive","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the size after compression","","","","","","","","","Returns size of uncompressed content","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Contains the error value","","","","","","","","","","","","","","Contains the success value","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","<code>offset</code>: offset to <code>content_offset</code> absolute offset = <code>offset</code> …","","","","","","","","","","","","","","","",""],"i":[1,1,1,0,0,0,0,8,0,0,0,0,1,0,0,8,0,1,0,0,8,0,1,0,0,8,0,8,0,0,1,1,0,1,1,78,79,80,17,7,1,8,13,9,10,78,79,80,17,7,1,8,13,9,10,0,4,0,7,1,8,9,10,7,1,8,9,10,0,0,0,78,79,80,17,7,1,8,13,9,10,78,79,80,17,7,1,8,13,9,10,13,78,79,80,17,7,1,8,13,9,10,1,8,0,0,17,7,1,1,8,13,9,9,10,78,79,80,17,7,1,8,13,9,10,81,1,8,1,1,8,0,78,79,80,17,7,1,8,13,9,10,78,79,80,17,7,1,8,13,9,10,0,0,17,0,13,0,7,1,8,9,10,1,13,9,78,79,80,17,7,1,8,8,13,9,10,78,79,80,17,7,1,8,13,9,10,78,79,80,17,7,1,8,13,9,10,17,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,39,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,41,42,43,44,48,49,50,51,52,53,54,45,39,46,41,42,43,44,48,49,50,51,52,53,54,45,39,46,39,39,36,41,42,43,44,45,46,0,0,47,48,49,50,51,52,53,54,45,41,46,41,42,43,44,48,49,50,51,52,53,54,45,39,46,41,42,43,44,48,49,50,51,52,53,54,45,39,46,41,42,43,44,48,49,50,51,52,53,54,45,39,46,41,42,43,44,48,49,50,51,52,53,54,45,39,46,39,41,42,43,44,48,49,50,51,52,53,54,45,39,46,41,42,43,44,48,49,50,51,52,53,54,45,39,46,41,42,43,44,45,46,39,39,41,42,43,44,48,49,50,51,52,53,54,45,39,46,41,42,43,44,48,49,50,51,52,53,54,45,39,46,41,42,43,44,48,49,50,51,52,53,54,45,39,46,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,56,56,0,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,60,61,60,60,60,5,60,0,60,60,60,60,60,60,60,60,60,60,61,5,60,0,0,60,60,60,60,61,60,61,60,61,60,61,60,61,60,60,61,61,60,60,60,60,60,60,61,60,61,60,61,60,60,61,60,61,60,61,60,61,0,0,0,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,0,0,0,69,73,70,69,73,70,73,69,73,70,69,73,70,69,73,70,69,69,73,70,69,69,73,70,69,73,70,70,73,69,70,70,73,73,69,73,70,70,70,70,69,73,70,69,73,70,73,69,73,70,0],"f":"`````````````````````````````````{bd}{bf}{ce{}{}}0000000000000000000`{h{{j{c}}}l}`{nn}{bb}{A`A`}{AbAb}{AdAd}{{ce}Af{}{}}0000```{Ahc{}}0000000000000000000{c{{Al{Aj}}}An}{AhAf}000000000{{bb}B`}{{A`A`}B`}``{{{Bb{c}}}{{Bd{Af}}}Bf}{{nBh}Bj}{{bBh}Bj}0{{A`Bh}Bj}{{AjBh}Bj}{{AbBh}Bj}0{{AdBh}Bj}{cc{}}000000000{{{Bn{Bl}}}C`}{Cb{{Cd{b}}}}{Cb{{Cd{A`}}}}{d{{Al{bc}}}{}}{Cf{{Cd{b}}}}{Cf{{Cd{A`}}}}`{{}Ah}000000000{ce{}{}}000000000``{c{{Bb{c}}}Bf}`{{Ajc}AlCh}`22222{cCj{}}00{c{{Al{e}}}{}{}}000000{Cl{{Al{A`c}}}{}}1111111111111{cCn{}}000000000{{{Bb{c}}{Bn{Bl}}}{{Bd{Ah}}}Bf}`{{{D`{c}}C`e}{{j{Af}}}{BfDb}{{Df{Dd}}}}88{Ahc{}}0{{{D`{c}}}Af{BfDb}}{AhAf}{{{D`{c}}}{{Bd{Af}}}{BfDb}}{cc{}}>={{c{Dj{Dh}}b}{{j{{D`{c}}}}}{BfDb}}{{{D`{c}}Aj}Af{BfDb}};;9{{{D`{c}}}{{j{Af}}}{BfDb}}{{}Dl}``````````````````{ce{}{}}000000000000000000000000000{DnDn}{{ce}Af{}{}}{{DhE`Bf}{{j{Cf}}}}{{EbE`Bf}{{j{Cf}}}}{{EdE`Bf}{{j{Cf}}}}{{EfE`Bf}{{j{Cf}}}}{{EhE`Bf}{{j{Cf}}}}{{EjE`Bf}{{j{Cf}}}}{{ElE`Bf}{{j{Cf}}}}{{bDn}{{Dj{Dh}}}}{b{{Dj{En}}}}{{EnE`Bf}{{j{Cf}}}}{{F`E`Bf}{{j{Cf}}}}{{FbE`Bf}{{j{Cf}}}}{{FdE`Bf}{{j{Cf}}}}{{FfE`Bf}{{j{Cf}}}}{{FhE`Bf}{{j{Cf}}}}{{FjE`Bf}{{j{Cf}}}}{{FlE`Bf}{{j{Cf}}}};{{}Eb}{{}El}{Ahc{}}000000000000000000000000000{AhAf}0000000000000{cc{}}0000000000000{d{{Al{Dnc}}}{}}{{}Ah}0000000000000{ce{}{}}0000000000000{fEb}{fEd}{fEf}{fEh}{{{Fn{Cj}}}Ej};{{Dnb}f}6{c{{Al{e}}}{}{}}000000000000000000000000000{cCn{}}0000000000000`88==<{{{G`{Cf}}}{{Bd{Af}}}}{{{G`{f}}}{{Bd{Af}}}}=;:{{{Gb{Cf}}}{{G`{Cf}}}}{{{Gb{f}}}{{G`{f}}}}554`{{{G`{f}}{Bn{Bl}}}{{Bd{Ah}}}}{{{G`{Cf}}{Bn{Bl}}}{{Bd{Ah}}}}`>>{Ahc{}}0{AhAf}{{{Gd{Cfc}}}{{Bd{Af}}}Bf}{cc{}}{{}Ah}{ce{}{}}{{{Gb{Cf}}c}{{Gd{Cfc}}}Bf}>>={{{Gd{Cfc}}{Bn{Bl}}}{{Bd{Ah}}}Bf}{Gf{{j{Af}}}}``````````````````````````3333888877{{GhBh}Bj}0{{GjBh}Bj}0{dGh}{GlGh}{GnGh}:{H`Gh}{HbGh}<;;::{Gh{{Cd{Hd}}}}{cCj{}}0{c{{Al{e}}}{}{}}000{cCn{}}0;;{Ab{{j{Af}}}}`??{Ahc{}}0{AhAf}{cc{}}{{}Ah}{ce{}{}}`{{Hfd}{{Bd{Af}}}}{CfHf}998{{HfCfCj}{{Bd{Af}}}}{Gf{{j{Af}}}}```444444{c{{Hh{e}}}{}{}}999999888{HjHl}888`7776666{c{{Hn{e}}}{}{}}{c{{j{Hj}}}{{Df{Dd}}}}{Hl{{Cd{c}}}{}}{c{{I`{e}}}{}{}}{{Ib{Bn{Bl}}}{{Bd{Ah}}}}{c{{Fn{Bl}}}{}}{{HjCfCf}Ib}{{cAh}{{Al{AfGn}}}{}}{c{{Id{e}}}{}{}}{c{{If{e}}}{}{}}{c{{Ih{e}}}{}{}}{c{{Ij{e}}}{}{}}{c{{Al{e}}}{}{}}00000{{c{Bn{Bl}}}{{Al{AhGn}}}{}}{cCn{}}00{Gf{{j{Af}}}}","c":[],"p":[[6,"Compression",0],[1,"str"],[1,"u32"],[10,"LocalResultExt",0],[8,"Result",455],[10,"Debug",589],[5,"Entry",0],[6,"FileType",0],[5,"Header",0],[5,"Timestamp",0],[1,"unit"],[1,"usize"],[5,"Info",0],[6,"Result",590],[10,"Deserializer",591],[1,"bool"],[5,"StreamPipe",0],[8,"Result",592],[10,"Write",593],[5,"Formatter",589],[8,"Result",589],[1,"u8"],[1,"slice"],[5,"OsStr",594],[1,"i64"],[6,"Option",595],[1,"u64"],[10,"Serializer",596],[5,"String",597],[5,"FileType",598],[5,"TypeId",599],[5,"Archive",198],[10,"Seek",593],[5,"Path",600],[10,"AsRef",601],[10,"Compress",217],[5,"Box",602],[5,"Command",603],[6,"Level",217],[10,"Read",593],[5,"GzipCompressor",217],[5,"XzCompressor",217],[5,"ZstdCompressor",217],[5,"Bzip2Compressor",217],[5,"ExternalFilter",217],[5,"NoCompressor",217],[10,"Decompress",217],[5,"GzipDecompressor",217],[5,"XzDecompressor",217],[5,"ZstdDecompressor",217],[5,"Bzip2Decompressor",217],[5,"NoDecompressor",217],[5,"BrotliDecompressor",217],[5,"Bzip3Decompressor",217],[5,"Vec",604],[5,"DigestWriter",420],[5,"Digest",605],[5,"CrcFilter",439],[5,"ArgMatches",606],[6,"Error",455],[6,"TimeError",455],[5,"FromUtf8Error",597],[5,"Error",592],[8,"Error",607],[5,"Error",608],[10,"Error",609],[5,"LineProgress",518],[5,"CharReader",610],[5,"ArchiveReader",535],[5,"Entries",535],[5,"Lines",611],[5,"IterBridge",612],[5,"ContentReader",535],[5,"Utf8CharSplitter",613],[5,"Utf16CharSplitter",614],[5,"Utf16CharMerger",615],[5,"Utf8CharMerger",615],[5,"EntryChecksum",0],[5,"ContentChecksum",0],[5,"Options",0],[10,"OsStrExt",0]],"b":[[108,"impl-Display-for-Compression"],[109,"impl-Debug-for-Compression"],[112,"impl-Debug-for-Header"],[113,"impl-Display-for-Header"],[426,"impl-Write-for-DigestWriter%3C\'a,+\'b,+u64%3E"],[427,"impl-Write-for-DigestWriter%3C\'a,+\'b,+u32%3E"],[431,"impl-DigestWriter%3C\'a,+\'b,+u64%3E"],[432,"impl-DigestWriter%3C\'a,+\'b,+u32%3E"],[437,"impl-Write-for-DigestWriter%3C\'a,+\'b,+u32%3E"],[438,"impl-Write-for-DigestWriter%3C\'a,+\'b,+u64%3E"],[491,"impl-Display-for-Error"],[492,"impl-Debug-for-Error"],[493,"impl-Display-for-TimeError"],[494,"impl-Debug-for-TimeError"],[495,"impl-From%3C%26str%3E-for-Error"],[496,"impl-From%3CFromUtf8Error%3E-for-Error"],[497,"impl-From%3CError%3E-for-Error"],[499,"impl-From%3CErrno%3E-for-Error"],[500,"impl-From%3CError%3E-for-Error"]]}],\
["base256",{"doc":"","t":"SHHH","n":["DICT","decode","encode","main"],"q":[[0,"base256"]],"d":["","","",""],"i":[0,0,0,0],"f":"`{{}b}00","c":[],"p":[[1,"unit"]],"b":[]}],\
["bczhc_lib",{"doc":"My library…","t":"CCCCQCCCCCCCQCQQCCCCPGPNNNNNNNNHNNNNNFKNNMNNNNHNNNNNNNNCFKFFFFFNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFONNNNNNNNNNNNOONNNNFKKFFNNNNNNHHNNNNNNNNNEMNNNNNNNNNNNNNNNNNNNNNNNNKHMKMFKKKKKKKHNNNNNCCNNHNNMNNNHHHMNMNNMNCFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPIPHHFNNNNNNNNNNNNNNNKMKMHHHFFNNNNOOHHNNNNNNNHNNNNNNNNONHONNNNNNHHHPPFGFPNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNN","n":["byteorder","char","complex","epicycle","field_size","fourier_series","fs","i32","io","lazy","libc","macros","mutex_lock","net","rw_read","rw_write","str","time","utf8","utils","BigEndian","Endianness","LittleEndian","borrow","borrow_mut","deref","deref_mut","drop","eq","fmt","from","get_endianness","init","into","try_from","try_into","type_id","CharReader","CharsTrait","borrow","borrow_mut","chars","deref","deref_mut","drop","from","han_char_range","init","into","into_iter","new","next","try_from","try_into","type_id","integral","Boole","Integrate","LeftRectangle","RightRectangle","Simpson","Simpson38","Trapezoid","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","complex_integral_rayon","complex_integral_rayon","complex_integral_rayon","complex_integral_rayon","complex_integral_rayon","complex_integral_rayon","complex_integral_rayon","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Epicycle","a","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","fmt","from","init","into","n","p","to_owned","try_from","try_into","type_id","Epicycles","EvaluatePath","FloatNum","LinearPath","TimePath","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","calc_n_rayon","compute_iter","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","euclid","evaluate","evaluate","evaluate","from","from","from","init","init","init","into","into","into","into_iter","new","new","next","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ForeachDir","new_unique_file","traversal_dir","ToStringRadix","to_string_radix","Lines","OpenOrCreate","Poll","ReadAll","ReadLines","ReadText","Skip","TryReadExact","attach_tcp_stream_to_stdio","borrow","borrow_mut","deref","deref_mut","drop","duplicator","errors","from","init","interact_two_streams","into","into_iter","lines","next","open_append_file","open_or_create","pipe_thread","put_c_char","put_char","read_all","read_text","skip","try_from","try_into","try_read_exact","type_id","unix","DuplicationReader","StreamDuplicator","borrow","borrow","borrow_mut","borrow_mut","chars","deref","deref","deref_mut","deref_mut","drop","drop","flush","from","from","init","init","into","into","lines","new","new","read","read_all","skip","try_from","try_from","try_into","try_into","try_read_exact","type_id","type_id","write","Err","ErrnoResult","Ok","attach_stream_to_stdio","interact_two_stream","Lazy","borrow","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","init","into","new","try_from","try_into","type_id","ToCString","to_c_string","GenericOsStrExt","escape","escape_utf8_bytes","current_time_millis","get_current_time_millis","SolvedUtf8Properties","Surrogate","borrow","borrow","borrow_mut","borrow_mut","bytes_length","codepoint","decode_utf8","decode_utf8_with_length","default","deref","deref","deref_mut","deref_mut","drop","drop","encode_utf8","fmt","fmt","from","from","init","init","into","into","lead","new","surrogate_pair_to_unicode","trail","try_from","try_from","try_into","try_into","type_id","type_id","unicode_to_surrogate_pair","utf8_bytes_length","utf8_size","Help","InvalidArgumentCount","MsgPrinter","MsgType","Pair","UnknownOption","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","fmt","from","from","from","get_args_without_self_path","get_file_name","init","init","init","into","into","into","new","new","show_msg","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"bczhc_lib"],[20,"bczhc_lib::byteorder"],[37,"bczhc_lib::char"],[55,"bczhc_lib::complex"],[56,"bczhc_lib::complex::integral"],[136,"bczhc_lib::epicycle"],[156,"bczhc_lib::fourier_series"],[204,"bczhc_lib::fs"],[207,"bczhc_lib::i32"],[209,"bczhc_lib::io"],[245,"bczhc_lib::io::duplicator"],[279,"bczhc_lib::io::errors"],[282,"bczhc_lib::io::unix"],[284,"bczhc_lib::lazy"],[300,"bczhc_lib::libc"],[302,"bczhc_lib::str"],[305,"bczhc_lib::time"],[307,"bczhc_lib::utf8"],[346,"bczhc_lib::utils"],[395,"core::fmt"],[396,"core::fmt"],[397,"core::any"],[398,"std::io"],[399,"core::option"],[400,"num_complex"],[401,"num_traits::float"],[402,"num_traits"],[403,"core::marker"],[404,"core::marker"],[405,"core::marker"],[406,"core::cmp"],[407,"core::fmt"],[408,"alloc::vec"],[409,"std::path"],[410,"std::io::error"],[411,"std::path"],[412,"std::fs"],[413,"alloc::string"],[414,"std::net::tcp"],[415,"std::fs"],[416,"std::io"],[417,"core::ops::function"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","Examples","","","","","","","","Returns the argument unchanged.","Return if a character is a Han character.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Struct for an epicycle in Fourier series","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","t is in [0, 1]","","<code>t</code> is in [0, 1]","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","create a file with unique filename for preventing from …","Traversal a directory recursively","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Read lines from the readable stream","","","","","Write a byte to [<code>stdout</code>] immediately","Write a rust <code>char</code> to [<code>stdout</code>] immediately","Read all data until the end","","","","","Read exact data","","","A wrapper reader. When read, also write the data to a …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Contains the error value","","Contains the success value","","","Variable lazy delegate","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","As a string pointer in C, for libc FFI.","","","Examples","","","","The UTF-16 surrogate pair struct lead: the high surrogate","","","","","","","Examples","Decode UTF-8 with a given length","","","","","","","","Examples","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Examples","","","","","","","","Examples","Examples","Examples","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,0,0,10,10,9,10,10,10,10,0,10,10,10,10,10,10,10,10,0,0,0,0,0,0,0,0,73,74,75,76,77,78,73,74,75,76,77,78,29,73,74,75,76,77,78,73,74,75,76,77,78,73,74,75,76,77,78,73,74,75,76,77,78,73,74,75,76,77,78,73,74,75,76,77,78,73,74,75,76,77,78,73,74,75,76,77,78,73,74,75,76,77,78,73,74,75,76,77,78,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,0,0,32,28,33,32,28,33,0,0,32,28,33,32,28,33,32,28,33,0,30,32,33,32,28,33,32,28,33,32,28,33,28,32,33,28,32,28,33,32,28,33,32,28,33,0,0,39,0,41,0,0,0,0,0,0,0,0,0,46,46,46,46,46,0,0,46,46,0,46,46,45,46,79,79,0,0,0,52,53,54,46,46,55,46,0,0,0,57,58,57,58,58,57,58,57,58,57,58,57,57,58,57,58,57,58,58,57,58,58,58,58,57,58,57,58,58,57,58,57,80,0,80,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,63,0,65,0,0,0,0,0,67,68,67,68,67,67,0,0,67,67,68,67,68,67,68,0,67,68,67,68,67,68,67,68,68,67,0,68,67,68,67,68,67,68,0,0,0,72,72,0,0,0,72,72,71,70,72,71,70,70,70,72,71,70,72,71,70,72,71,70,70,70,72,71,70,0,0,72,71,70,72,71,70,71,70,71,70,72,71,70,72,71,70,72,71,70],"f":"```````````````````````{ce{}{}}0{bc{}}0{bd}{{ff}h}{{fj}l}{cc{}}{{}f}{{}b}7{c{{n{e}}}{}{}}0{cA`{}}``99{Ab{{Ad{c}}}Af}9985{Ahh}4;;{c{{Ad{c}}}Af}{{{Ad{c}}}{{Aj{e}}}Af{}}554````````============{{Ahcce}{{Al{c}}}{AnB`B`BbBd}{{Bh{c}{{Bf{{Al{c}}}}}}BjBdBb}}000000============<<<<<<999999777777>>>>>>666666666666555555``>>{{{Bl{c}}}{{Bl{c}}}{AnBn}}{{ce}d{}{}}??>{{{Bl{c}}{Bl{c}}}h{AnC`}}{{{Bl{c}}j}l{AnCb}}=;{ce{}{}}``0;;:`````000000{{cAhCde}{{Bl{c}}}{CfB`BbBd}{{Bh{c}{{Bf{{Al{c}}}}}}BbBdBj}}{{CdCdcAhe}{{Ch{gec}}}Cf{{Bh{c}{{Bf{{Al{c}}}}}}BbBj}Cj}{bc{}}00000{bd}00`{{Clc}{{Cn{cd}}}Cf}{{{D`{c}}c}{{Cn{cd}}}Cf}{{{Db{c}}c}{{Cn{cd}}}Cf}{cc{}}00{{}b}009999{{{Dd{{Cn{cd}}}}}{{D`{c}}}Cf}{{{Dd{{Cn{cd}}}}}{{Db{c}}}Cf}{{{Ch{cge}}}{{Aj{i}}}Cj{CfB`BbBd}{{Bh{e}{{Bf{{Al{e}}}}}}BbBdBj}{}}{c{{n{e}}}{}{}}00000{cA`{}}00`{c{{Dh{Df}}}{{Dl{Dj}}}}{{Dnc}{{Dh{d}}}{{Bh{{Dh{E`}}}}Bn}}`{{EbCd}{{n{EdEd}}}}````````{Ef{{Dh{d}}}}{ce{}{}}0{bc{}}0{bd}``=<{{ce}{{Dh{d}}}EhEh}33{Ej{{El{c}}}Af}{{{El{c}}}{{Aj{e}}}Af{}}{c{{Dh{En}}}{{Dl{Dj}}}}0{{ce}{{F`{{Dh{d}}}}}{AfBb}{FbBb}}{Fd{{Dh{d}}}}{Ff{{Dh{d}}}}{Fh{{Dd{Fd}}}}{Fj{{Dh{Ed}}}}{{Flb}{{Dh{d}}}}{c{{n{e}}}{}{}}0{{Fn{G`{Fd}}}{{Dh{b}}}}{cA`{}}```????{c{{Ad{e}}}{}{}}????>>{{{Gb{ce}}}{{Dh{d}}}FbFb}{cc{}}0{{}b}0{ce{}{}}0{c{{El{e}}}{}{}}{{ce}{{Gb{ce}}}FbFb}{{ce}{{Gd{ce}}}AfFb}{{{Gd{ce}}{G`{Fd}}}{{Dh{b}}}AfFb}{c{{Dd{Fd}}}{}}{{cb}{{n{dGf}}}{}}===={{c{G`{Fd}}}{{n{bGf}}}{}}<<{{{Gb{ce}}{G`{Fd}}}{{Dh{b}}}FbFb}```{c{{Dh{d}}}{AfFbGh}}{{EfEf}{{Dh{d}}}}`::{bc{}}{{{Gj{ce}}}g{}{{Gl{}{{Bf{c}}}}Bj}{}}01{bd}{{{Gj{ce}}}d{}{{Gl{}{{Bf{c}}}}Bj}}{cc{}}{{}b}{ce{}{}}{e{{Gj{ce}}}{}{{Gl{}{{Bf{c}}}}Bj}}{c{{n{e}}}{}{}}0{cA`{}}`{GnH`}`{HbEd}{{{G`{Fd}}}Ed}{{}Hd}0``7777``{{{G`{Fd}}}Hf}{{{G`{Fd}}Ah}Hf}{{}Hf}{bc{}}000??{{Ah{G`{Fd}}}b}{{Hfj}l}{{Hhj}l}{cc{}}0{{}b}0{ce{}{}}0`7{{HjHj}Ah}`{c{{n{e}}}{}{}}000{cA`{}}0{AhHh}{FdAh}{Ahb}``````666666{{{Hl{ce}}}{{Hl{ce}}}BnBn}{{ce}d{}{}}>>>>>>{bd}00{{{Hl{ce}}{Hl{ce}}}hC`C`}{{{Hl{ce}}j}lCbCb}==={{}{{Dd{Ed}}}}{{}Ed}>>>==={EdHn}{{ce}{{Hl{ce}}}{}{}}{{HnI`}{{n{dEd}}}}{ce{}{}}??????>>>","c":[],"p":[[1,"usize"],[1,"unit"],[6,"Endianness",20],[1,"bool"],[5,"Formatter",395],[8,"Result",395],[6,"Result",396],[5,"TypeId",397],[10,"CharsTrait",37],[5,"CharReader",37],[10,"Read",398],[1,"u32"],[6,"Option",399],[5,"Complex",400],[10,"Float",401],[10,"NumAssign",402],[10,"Send",403],[10,"Sync",403],[17,"Output"],[10,"Fn",404],[10,"Copy",403],[5,"Epicycle",136],[10,"Clone",405],[10,"PartialEq",406],[10,"Debug",395],[1,"i32"],[10,"FloatNum",156],[5,"Epicycles",156],[10,"Integrate",56],[10,"EvaluatePath",156],[5,"Point2D",407],[5,"LinearPath",156],[5,"TimePath",156],[5,"Vec",408],[5,"PathBuf",409],[8,"Result",410],[5,"Path",409],[10,"AsRef",411],[10,"ForeachDir",204],[5,"DirEntry",412],[10,"ToStringRadix",207],[5,"String",413],[5,"TcpStream",414],[10,"Poll",209],[10,"ReadLines",209],[5,"Lines",209],[5,"File",412],[5,"JoinHandle",415],[10,"Write",398],[1,"u8"],[1,"char"],[10,"ReadAll",209],[10,"ReadText",209],[10,"Skip",209],[10,"TryReadExact",209],[1,"slice"],[5,"StreamDuplicator",245],[5,"DuplicationReader",245],[5,"Error",410],[10,"AsRawFd",416],[5,"Lazy",284],[10,"FnOnce",404],[10,"ToCString",300],[5,"CString",417],[10,"GenericOsStrExt",302],[1,"u64"],[5,"SolvedUtf8Properties",307],[5,"Surrogate",307],[1,"u16"],[5,"Pair",346],[5,"MsgPrinter",346],[6,"MsgType",346],[5,"Trapezoid",56],[5,"LeftRectangle",56],[5,"RightRectangle",56],[5,"Simpson",56],[5,"Simpson38",56],[5,"Boole",56],[10,"OpenOrCreate",209],[8,"ErrnoResult",279]],"b":[]}],\
["bin_find",{"doc":"","t":"FKFFNNNNNNNNNNONNNNNNNONNNNNNNNNNNNNNNNNMN","n":["Args","IterWindow","Windows","WindowsIter","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","command","command_for_update","file","fmt","from","from","from","from_arg_matches","from_arg_matches_mut","group_id","hex_string","into","into","into","into_iter","iter","next","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","windows","windows"],"q":[[0,"bin_find"],[42,"clap_builder::builder::command"],[43,"core::fmt"],[44,"core::fmt"],[45,"clap_builder"],[46,"core::result"],[47,"clap_builder::util::id"],[48,"core::option"],[49,"core::clone"],[50,"core::iter::traits::iterator"],[51,"core::any"]],"d":["Search binary in a file","","","","","","","","","","","","","","Search in this file. If no file is given, stdin will be …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,2,2,10,11,2,10,11,2,2,2,2,2,10,11,2,2,2,2,2,10,11,2,11,10,11,10,11,2,10,11,2,10,11,2,2,2,17,11],"f":"````{bb}0{ce{}{}}00000{{}b}0`{{df}h}{cc{}}00{j{{n{dl}}}}0{{}{{Ab{A`}}}}`5555{{{Ad{ce}}}{{Af{ce}}}Ah{{Al{}{{Aj{c}}}}}}{{{Af{ce}}}{{Ab{g}}}Ah{{Al{}{{Aj{c}}}}}{}}{c{{n{e}}}{}{}}00000{cAn{}}00{{dj}{{n{B`l}}}}0{{BbBd}{{Ad{ce}}}Ah{{Al{}{{Aj{c}}}}}}{{cBd}{{Ad{eg}}}{}{}{}}","c":[],"p":[[5,"Command",42],[5,"Args",0],[5,"Formatter",43],[8,"Result",43],[5,"ArgMatches",44],[8,"Error",45],[6,"Result",46],[5,"Id",47],[6,"Option",48],[5,"Windows",0],[5,"WindowsIter",0],[10,"Clone",49],[17,"Item"],[10,"Iterator",50],[5,"TypeId",51],[1,"unit"],[10,"IterWindow",0],[1,"usize"]],"b":[]}],\
["binary_input",{"doc":"","t":"PGPPINNNNNNNNNNNNNNNNCH","n":["Err","Error","Io","Ok","Result","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","init","into","source","to_string","try_from","try_into","type_id","unix","main"],"q":[[0,"binary_input"],[22,"binary_input::unix"],[23,"core::fmt"],[24,"core::fmt"],[25,"core::error"],[26,"core::option"],[27,"alloc::string"],[28,"core::result"],[29,"core::any"]],"d":["Contains the error value","","","Contains the success value","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[12,0,3,12,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0],"f":"`````{ce{}{}}0{bc{}}0{bd}{{fh}j}0{lf}{cc{}}{{}b}6{f{{A`{n}}}}{cAb{}}{c{{Ad{e}}}{}{}}0{cAf{}}`{{}{{Ah{d}}}}","c":[],"p":[[1,"usize"],[1,"unit"],[6,"Error",0],[5,"Formatter",23],[8,"Result",23],[5,"Error",24],[10,"Error",25],[6,"Option",26],[5,"String",27],[6,"Result",28],[5,"TypeId",29],[8,"Result",0]],"b":[[10,"impl-Debug-for-Error"],[11,"impl-Display-for-Error"]]}],\
["binary_wav_codec",{"doc":"","t":"PPIHHCCGGPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNFKFTRNNNNNNNNNNNNNNCNNNNNMNNNNNNFFFFFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Err","Ok","Result","decode_stream","encode_stream","errors","int_reader","Error","FormatError","FormatError","IoError","NoEnoughSamples","UsageError","WavError","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","from","from","from","init","init","into","into","try_from","try_from","try_into","try_into","type_id","type_id","FileIntReader","IntReadable","Ints","READ_SIZE","ResultType","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","from","from","init","init","int_type","into","into","into_iter","new_iterator","next","read","try_from","try_from","try_into","try_into","type_id","type_id","I128","I16","I24","I32","I48","I64","I8","U128","U16","U24","U32","U48","U64","U8","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","from","from","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","read","read","read","read","read","read","read","read","read","read","read","read","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"binary_wav_codec"],[7,"binary_wav_codec::errors"],[41,"binary_wav_codec::int_reader"],[73,"binary_wav_codec::int_reader::int_type"],[253,"std::io"],[254,"std::io"],[255,"core::fmt"],[256,"hound"],[257,"core::result"],[258,"core::any"],[259,"byteorder"],[260,"core::option"]],"d":["Contains the error value","Contains the success value","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","<code>E</code>: <code>byteorder::LittleEndian</code> or <code>byteorder::BigEndian</code>","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Examples","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[2,2,0,0,0,0,0,0,0,7,7,10,7,7,7,10,7,10,7,10,7,10,7,10,7,10,7,7,7,7,10,7,10,7,10,7,10,7,10,7,10,0,0,0,17,17,21,15,21,15,21,15,21,15,21,15,21,15,21,15,0,21,15,15,21,15,17,21,15,21,15,21,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,23,24,25,26,27,28,29,30,31,32,33,34,35,22,23,24,25,26,27,28,29,30,31,32,33,34,35,22,23,24,25,26,27,28,29,30,31,32,33,34,35,22,23,24,25,26,27,28,29,30,31,32,33,34,35,22,23,24,25,26,27,28,29,30,31,32,33,34,35,22,23,24,25,26,27,28,29,30,31,32,33,34,35,22,23,24,25,26,27,28,29,30,31,32,33,34,35,22,23,24,25,26,27,28,29,30,31,32,33,34,35,22,23,26,27,28,29,30,31,32,33,34,35,22,23,24,25,26,27,28,29,30,31,32,33,34,35,22,23,24,25,26,27,28,29,30,31,32,33,34,35,22,23,24,25,26,27,28,29,30,31,32,33,34,35],"f":"```{{ce}{{d{b}}}fh}{{ce}{{d{b}}}f{hj}}`````````{ce{}{}}000{lc{}}000{lb}0{{nA`}Ab}{{AdA`}Ab}{Afn}{Ahn}{Adn}{cc{}}0{{}l}099{c{{Aj{e}}}{}{}}000{cAl{}}0`````;;;;::::993322`;;;{c{{An{gce}}}fB`{{Bb{e}}}}{{{An{egc}}}{{Bd{i}}}B`{{Bb{c}}}f{}}{{{Bh{Bf}}}c{}}444433``````````````>>>>>>>>>>>>>>>>>>>>>>>>>>>>============================<<<<<<<<<<<<<<6666666666666655555555555555>>>>>>>>>>>>>>000000000000444444444444444444444444444433333333333333","c":[],"p":[[1,"unit"],[8,"Result",0],[10,"Read",253],[10,"Write",253],[10,"Seek",253],[1,"usize"],[6,"Error",7],[5,"Formatter",254],[8,"Result",254],[6,"FormatError",7],[5,"Error",255],[6,"Error",256],[6,"Result",257],[5,"TypeId",258],[5,"Ints",41],[10,"ByteOrder",259],[10,"IntReadable",41],[6,"Option",260],[1,"u8"],[1,"slice"],[5,"FileIntReader",41],[5,"I8",73],[5,"U8",73],[5,"I16",73],[5,"U16",73],[5,"I24",73],[5,"U24",73],[5,"I32",73],[5,"U32",73],[5,"U48",73],[5,"I48",73],[5,"I64",73],[5,"U64",73],[5,"I128",73],[5,"U128",73]],"b":[[26,"impl-From%3CError%3E-for-Error"],[27,"impl-From%3CError%3E-for-Error"],[28,"impl-From%3CFormatError%3E-for-Error"]]}],\
["btc_tools",{"doc":"","t":"PPPPIPCCHHHHHCHHHGFFPPPPFPFPFFPPFFPPFPGPFFPFFPFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOHH","n":["Base58","Hex","InvalidHexLength","InvalidKeyPrefix","KeyError","Secp256k1","brain_wallet","cli","ec_hex_to_wif","ec_to_wif","input_password","public_to_address","truncate_sensitive","vanity_address","wif_to_address","wif_to_public","main","AddressType","AddressTypeArg","Args","Base58Decode","Base58DecodeCheck","Base58Encode","Base58EncodeCheck","Base58StringArg","BrainWallet","BrainWalletArgs","EcToAddress","EcToAddressArgs","EcToWif","EcToWif","GenerateAddress","GenerateAddressArgs","HexEncodedStringArg","P2pkh","P2wpkh","PublicToAddress","PublicToAddress","Subcommands","ValidateAddress","ValidateAddressArgs","WifArg","WifToAddress","WifToAddressArgs","WifToEc","WifToEc","WifToPublic","WifToPublic","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","base58","bip38","bip38","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","command","command","command_for_update","compressed","compressed","data","decode","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","ec_to_wif_args","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","group_id","group_id","group_id","group_id","group_id","group_id","group_id","group_id","group_id","group_id","group_id","group_id","has_subcommand","hex","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","iter_num","jobs","jobs","key","pass_file","substring","to_owned","to_possible_value","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type","type","type","type_args","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","value_variants","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","wif","wif","wif","wif","main","validate_address"],"q":[[0,"btc_tools"],[16,"btc_tools::brain_wallet"],[17,"btc_tools::cli"],[393,"btc_tools::vanity_address"],[395,"alloc::string"],[396,"anyhow"],[397,"bitcoin::crypto::key"],[398,"bitcoin::address"],[399,"bitcoin::address"],[400,"clap_builder::builder::command"],[401,"core::fmt"],[402,"core::fmt"],[403,"clap_builder"],[404,"clap_builder::util::id"],[405,"core::option"],[406,"clap_builder::builder::possible_value"],[407,"core::any"]],"d":["Base58 encoding error","Hex decoding error","<code>PublicKey</code> hex should be 66 or 130 digits long.","Invalid key prefix error","","secp256k1-related error","","","","","","","","","","","","","","","","","","","","","Brain-wallet derivation","","","","","","Generate bitcoin addresses","","","","","","","","Validate the correctness of: private key -&gt; address, to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Use BIP-38","Decrypt BIP-38","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decode BIP38. NOTE: this will print secret keys (in WIF) …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Iteration number","Number of parallel jobs; default is the number of all …","The amount of parallel workers; defaults to the CPU number","","Read passphrase from file","The string to be contained in the address (p2wpkh)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[12,12,12,12,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,20,20,0,20,0,20,0,0,20,20,0,0,8,8,0,20,0,20,0,0,20,0,0,20,0,20,17,21,22,23,24,25,26,13,27,28,29,30,31,32,17,21,22,23,24,25,26,13,27,28,29,30,31,32,20,20,29,25,26,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,8,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,8,8,8,17,17,17,22,13,28,26,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,8,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,8,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,8,23,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,8,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,8,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,17,21,22,23,24,25,26,13,27,28,29,30,31,32,20,22,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,8,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,8,13,25,26,30,13,25,8,8,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,8,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,8,13,30,31,32,23,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,8,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,8,17,20,21,22,23,24,25,26,13,27,28,29,30,31,32,8,21,24,27,32,0,0],"f":"````````{{bd}{{h{f}}}}{{{l{j}}d}{{h{f}}}}{{}{{h{f}}}}{{nA`}{{Af{AbAd}}}}{bf}`{{bA`}{{h{Ab}}}}{b{{Af{nAh}}}}{Aj{{h{Al}}}}```````````````````````````````{AnAn}00000000000000000000000000000```{ce{}{}}0000000000000000000000000000000{A`A`}{{ce}Al{}{}}{{}An}`0````{B`c{}}0000000000000000000000000000000{B`Al}000000000000000`{{BbBd}Bf}{{BhBd}Bf}{{BjBd}Bf}{{BlBd}Bf}{{BnBd}Bf}{{C`Bd}Bf}{{CbBd}Bf}{{CdBd}Bf}{{AjBd}Bf}{{CfBd}Bf}{{ChBd}Bf}{{CjBd}Bf}{{ClBd}Bf}{{CnBd}Bf}{{D`Bd}Bf}{{A`Bd}Bf}{cc{}}000000000000000{Db{{Af{BbDd}}}}{Db{{Af{BhDd}}}}{Db{{Af{BjDd}}}}{Db{{Af{BlDd}}}}{Db{{Af{BnDd}}}}{Db{{Af{C`Dd}}}}{Db{{Af{CbDd}}}}{Db{{Af{CdDd}}}}{Db{{Af{AjDd}}}}{Db{{Af{CfDd}}}}{Db{{Af{ChDd}}}}{Db{{Af{CjDd}}}}{Db{{Af{ClDd}}}}{Db{{Af{CnDd}}}}{Db{{Af{D`Dd}}}}>=<;:9876543210{{}{{Dh{Df}}}}0000000000000{bd}`{{}B`}000000000000000{ce{}{}}000000000000000``````0{A`{{Dh{Dj}}}}{c{{Af{e}}}{}{}}0000000000000000000000000000000`````{cDl{}}000000000000000{{BbDb}{{Af{AlDd}}}}{{BhDb}{{Af{AlDd}}}}{{BjDb}{{Af{AlDd}}}}{{BlDb}{{Af{AlDd}}}}{{BnDb}{{Af{AlDd}}}}{{C`Db}{{Af{AlDd}}}}{{CbDb}{{Af{AlDd}}}}{{CdDb}{{Af{AlDd}}}}{{AjDb}{{Af{AlDd}}}}{{CfDb}{{Af{AlDd}}}}{{ChDb}{{Af{AlDd}}}}{{CjDb}{{Af{AlDd}}}}{{ClDb}{{Af{AlDd}}}}{{CnDb}{{Af{AlDd}}}}{{D`Db}{{Af{AlDd}}}}>=<;:9876543210{{}{{l{A`}}}}{ce{}{}}000000000000000````{Cb{{h{Al}}}}{Cd{{h{Al}}}}","c":[],"p":[[1,"str"],[1,"bool"],[5,"String",395],[8,"Result",396],[1,"u8"],[1,"slice"],[5,"PublicKey",397],[6,"AddressType",17],[5,"Address",398],[6,"Error",398],[6,"Result",399],[8,"KeyError",0],[5,"BrainWalletArgs",17],[1,"unit"],[5,"Command",400],[1,"usize"],[5,"Args",17],[5,"Formatter",401],[8,"Result",401],[6,"Subcommands",17],[5,"WifToEc",17],[5,"EcToWif",17],[5,"EcToAddressArgs",17],[5,"WifToPublic",17],[5,"GenerateAddressArgs",17],[5,"ValidateAddressArgs",17],[5,"WifArg",17],[5,"HexEncodedStringArg",17],[5,"Base58StringArg",17],[5,"PublicToAddress",17],[5,"AddressTypeArg",17],[5,"WifToAddressArgs",17],[5,"ArgMatches",402],[8,"Error",403],[5,"Id",404],[6,"Option",405],[5,"PossibleValue",406],[5,"TypeId",407]],"b":[]}],\
["char_count",{"doc":"","t":"H","n":["main"],"q":[[0,"char_count"]],"d":[""],"i":[0],"f":"{{}b}","c":[],"p":[[1,"unit"]],"b":[]}],\
["char_stat",{"doc":"","t":"FFONNNNNNNNNNNNNONNNNHONNNNNNNN","n":["Argument","Main","argument","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","do_statistics","drop","drop","from","from","han_mode","init","init","into","into","main","msg_printer","new","run","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"char_stat"],[31,"alloc::string"],[32,"core::result"],[33,"core::any"]],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,2,7,2,7,2,7,2,7,2,2,7,2,7,2,7,7,2,7,2,0,2,2,2,7,2,7,2,7,2],"f":"```{ce{}{}}000{bc{}}000{df}{bf}0{cc{}}0`{{}b}055{{}{{j{fh}}}}`{{}d}{d{{j{fh}}}}{c{{j{e}}}{}{}}000{cl{}}0","c":[],"p":[[1,"usize"],[5,"Main",0],[1,"unit"],[5,"String",31],[6,"Result",32],[5,"TypeId",33],[5,"Argument",0]],"b":[]}],\
["completion_generator",{"doc":"","t":"JSCHH","n":["BIN_NAMES","CLI_BUILDERS","cli","print_completions","build_cli"],"q":[[0,"completion_generator"],[4,"completion_generator::cli"],[5,"clap_builder::builder::command"],[6,"clap_complete::generator"]],"d":["","","","",""],"i":[0,0,0,0,0],"f":"```{{cb}df}{{}b}","c":[],"p":[[5,"Command",5],[1,"unit"],[10,"Generator",6]],"b":[]}],\
["cow_dedupe",{"doc":"","t":"FFKFNNNNNNCCNNNNNNNNNNCOONNNCHHHCMNNONNNNNNHHCNNNNNNNNNNHPPPPPPPFFPFPPFGPPGPPPPGPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNONNNNNNNNONNNNNNNNONOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNHPGPPINNNNNNNNNNNNNNNNFNNNNHNNNNNNONHOONNNNFFFFIFKFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFONNHOONNNNNONNNNNN","n":["FileFragmentsHasher","FileFullHasher","FileHash","Group","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cli","dedupe","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","errors","file_size","files","from","from","from","group","group_by_hash","group_by_size","group_redundant_size","hash","hash","hash","hash","hash","init","init","init","into","into","into","parse_input_file","print_redundant_size","serde","serialize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unique_by_hardlinks","B3_1024","B3_128","B3_160","B3_2048","B3_256","B3_512","Binary","CliConfig","CommonArgs","Dedupe","DedupeArgs","Default","Group","GroupArgs","HashFn","Json","No","OutputFormat","Sha256","Sha3_256","Sha3_512","Sha512","Subcommands","Yes","YesNoChoice","augment_args","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","command","command","command_for_update","common","common","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","dry_run","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","full_hash","group_id","group_id","group_id","group_id","has_subcommand","hash_fn","init","init","init","init","init","init","init","init","input_file","into","into","into","into","into","into","into","into","min_size","no","output_format","path","to_owned","to_owned","to_owned","to_owned","to_owned","to_possible_value","to_possible_value","to_possible_value","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","use_cp_cmd","value_variants","value_variants","value_variants","yes","main","Err","Error","Io","Ok","Result","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","init","into","source","to_string","try_from","try_into","type_id","FileEntry","borrow","borrow_mut","clone","clone_into","collect_and_group_files","deref","deref_mut","drop","fmt","from","init","inode","into","main","path","size","to_owned","try_from","try_into","type_id","B3_1024","B3_128","B3_160","B3_2048","B3_256","B3_512","FixedDigest","HashWriter","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain_update","chain_update","chain_update","chain_update","chain_update","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","digest","digest","digest","digest","digest","drop","drop","drop","drop","drop","drop","finalize","finalize","finalize","finalize","finalize","finalize_into","finalize_into","finalize_into","finalize_into","finalize_into","finalize_into","finalize_into","finalize_into","finalize_into","finalize_into","finalize_into_reset","finalize_into_reset","finalize_into_reset","finalize_into_reset","finalize_into_reset","finalize_reset","finalize_reset","finalize_reset","finalize_reset","finalize_reset","flush","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","new","new","new","new","new","new","new","new","new","new","new_with_prefix","new_with_prefix","new_with_prefix","new_with_prefix","new_with_prefix","output_size","output_size","output_size","output_size","output_size","reset","reset","reset","reset","reset","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","update","update","update","update","update","update","update","update","update","write","Output","base_dir","borrow","borrow_mut","build_output","cmd_args","creation_time","deref","deref_mut","deserialize","drop","from","groups","init","into","serialize","try_from","try_into","type_id"],"q":[[0,"cow_dedupe"],[57,"cow_dedupe::cli"],[250,"cow_dedupe::dedupe"],[251,"cow_dedupe::errors"],[272,"cow_dedupe::group"],[293,"cow_dedupe::hash"],[444,"cow_dedupe::serde"],[463,"core::result"],[464,"serde::de"],[465,"alloc::vec"],[466,"std::io::error"],[467,"core::iter::traits::iterator"],[468,"core::ops::function"],[469,"std::path"],[470,"core::convert"],[471,"anyhow"],[472,"serde::ser"],[473,"core::any"],[474,"clap_builder::builder::command"],[475,"core::fmt"],[476,"core::fmt"],[477,"clap_builder"],[478,"clap_builder::util::id"],[479,"core::option"],[480,"clap_builder::builder::possible_value"],[481,"std::io::error"],[482,"alloc::string"],[483,"generic_array"],[484,"crypto_common"],[485,"digest"],[486,"core::default"]],"d":["some portion from file startsome portion from file endsome …","Hash the whole file","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","TODO: see known issues","","","","","","","","","","","","","","","","","","","A simple file-based deduplication tool using CoW semantics …","","Do file deduplication","","","List duplicated files","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Don’t do anything; just print the size of duplicated …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Print the whole hash of each file. Otherwise it will print …","","","","","","Hashing algorithm to be used","","","","","","","","","JSON or binary input file","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Minimum size filter","","Output format","Paths","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains the error value","","","Contains the success value","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,56,57,2,56,57,2,0,0,56,57,2,56,57,2,2,56,57,2,0,2,2,56,57,2,0,0,0,0,0,58,56,57,2,56,57,2,56,57,2,0,0,0,2,56,57,2,56,57,2,56,57,2,0,26,26,26,26,26,26,27,0,0,33,0,27,33,0,0,27,28,0,26,26,26,26,0,28,0,30,24,34,25,30,24,34,25,33,33,30,33,24,34,25,26,27,28,30,33,24,34,25,26,27,28,24,25,26,27,28,24,25,26,27,28,30,30,30,24,34,30,33,24,34,25,26,27,28,30,33,24,34,25,26,27,28,30,33,24,34,25,26,27,28,34,28,30,33,24,34,25,26,27,28,30,33,24,34,25,26,27,28,30,33,24,34,25,30,33,24,34,25,24,30,24,34,25,33,25,30,33,24,34,25,26,27,28,25,30,33,24,34,25,26,27,28,25,28,24,25,24,25,26,27,28,26,27,28,30,33,24,34,25,26,27,28,30,33,24,34,25,26,27,28,30,33,24,34,25,26,27,28,30,33,24,34,25,30,33,24,34,25,34,26,27,28,28,0,59,0,41,59,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,8,8,8,8,0,8,8,8,8,8,8,8,8,0,8,8,8,8,8,8,0,0,0,0,0,0,0,0,52,45,46,47,48,49,52,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,52,45,46,47,48,49,52,45,46,47,48,49,45,46,47,48,49,52,45,46,47,48,49,45,46,47,48,49,45,45,46,46,47,47,48,48,49,49,45,46,47,48,49,45,46,47,48,49,52,52,45,46,47,48,49,52,45,46,47,48,49,52,45,46,47,48,49,45,45,46,46,47,47,48,48,49,49,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,52,45,46,47,48,49,52,45,46,47,48,49,52,45,46,47,48,49,45,45,46,46,47,47,48,48,49,49,52,0,55,55,55,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55],"f":"````{ce{}{}}00000``{bc{}}00000{c{{f{d}}}h}{bj}00```{cc{}}00`{e{{Af{{Ab{{Ad{{n{l}}{Ab{A`}}}}}}}}}{{Al{}{{Ah{{Aj{A`}}}}}}}{{B`{}{{An{c}}}}}}{{{Ab{A`}}}{{Ab{{Ab{A`}}}}}}{{{Aj{d}}}Bb}`{{ce}{{Af{{n{l}}}}}{{Bf{Bd}}}{{B`{b}}}}00`{{}b}00999{c{{Bh{{Ab{d}}}}}{{Bf{Bd}}}}{{{Aj{d}}}j}`{{dc}fBj}{c{{f{e}}}{}{}}00000{cBl{}}00{{{Aj{A`}}}{{Ab{A`}}}}`````````````````````````{BnBn}000000000{ce{}{}}000000000000000{C`C`}{CbCb}{CdCd}{CfCf}{ChCh}{{ce}j{}{}}0000{{}Bn}`0``{bc{}}000000000000000{bj}0000000`{{ChCh}Cj}{{ClCn}D`}{{DbCn}D`}{{C`Cn}D`}{{DdCn}D`}{{CbCn}D`}{{CdCn}D`}{{CfCn}D`}{{ChCn}D`}{cc{}}0000000{Df{{f{ClDh}}}}{Df{{f{DbDh}}}}{Df{{f{C`Dh}}}}{Df{{f{DdDh}}}}{Df{{f{CbDh}}}}43210`{{}{{Dl{Dj}}}}000{DnCj}`{{}b}0000000`{ce{}{}}0000000`{ChCj}``11111{Cd{{Dl{E`}}}}{Cf{{Dl{E`}}}}{Ch{{Dl{E`}}}}{c{{f{e}}}{}{}}000000000000000{cBl{}}0000000{{ClDf}{{f{jDh}}}}{{DbDf}{{f{jDh}}}}{{C`Df}{{f{jDh}}}}{{DdDf}{{f{jDh}}}}{{CbDf}{{f{jDh}}}}43210`{{}{{Aj{Cd}}}}{{}{{Aj{Cf}}}}{{}{{Aj{Ch}}}}={Dd{{Bh{j}}}}`````??{bc{}}0{bj}{{EbCn}D`}0{cc{}}{EdEb}{{}b}{ce{}{}}{Eb{{Dl{Ef}}}}{cEh{}}{c{{f{e}}}{}{}}0{cBl{}}`44{A`A`}{{ce}j{}{}}{Cb{{Bh{{Ab{d}}}}}}==<{{A`Cn}D`};9`8{C`{{Bh{j}}}}``9665````````999999999999{{ce}g{}{{Bf{{Aj{l}}}}}{}}0000{{}Ej}{{}El}{{}En}{{}F`}{{}Fb}{bc{}}00000000000{c{{Fd{l}}}{{Bf{{Aj{l}}}}}}0000{bj}00000{c{{Fd{l}}}{}}0000{{c{Fd{l}}}j{}}{{Ej{Ff{Ej}}}j}{{El{Ff{El}}}j}2{{En{Ff{En}}}j}33{{F`{Ff{F`}}}j}{{Fb{Ff{Fb}}}j}55555566666{{{Fh{c}}}{{Af{j}}}Fj}{cc{}}00000{{}b}00000{ce{}{}}00000{{}c{}}{{}Ej}{{}El}22{{}En}{{}F`}4{{}Fb}5{ce{{Bf{{Aj{l}}}}}Fl}000088888{cj{}}0000{c{{f{e}}}{}{}}00000000000{cBl{}}00000{{Ej{Aj{l}}}j}{{ce}j{}{{Bf{{Aj{l}}}}}}0{{El{Aj{l}}}j}1{{En{Aj{l}}}j}2{{F`{Aj{l}}}j}{{Fb{Aj{l}}}j}4{{{Fh{c}}{Aj{l}}}{{Af{b}}}Fj}``{ce{}{}}0{{{Ab{d}}}Fn}``{bc{}}0{c{{f{Fn}}}h}{bj}{cc{}}`{{}b}6{{Fnc}fBj}{c{{f{e}}}{}{}}0{cBl{}}","c":[],"p":[[1,"usize"],[5,"Group",0],[6,"Result",463],[10,"Deserializer",464],[1,"unit"],[1,"u8"],[1,"array"],[5,"FileEntry",272],[5,"Vec",465],[1,"tuple"],[8,"Result",466],[17,"Item"],[1,"slice"],[10,"Iterator",467],[17,"Output"],[10,"Fn",468],[1,"u64"],[5,"Path",469],[10,"AsRef",470],[8,"Result",471],[10,"Serializer",472],[5,"TypeId",473],[5,"Command",474],[5,"GroupArgs",57],[5,"CommonArgs",57],[6,"HashFn",57],[6,"OutputFormat",57],[6,"YesNoChoice",57],[1,"bool"],[5,"CliConfig",57],[5,"Formatter",475],[8,"Result",475],[6,"Subcommands",57],[5,"DedupeArgs",57],[5,"ArgMatches",476],[8,"Error",477],[5,"Id",478],[6,"Option",479],[1,"str"],[5,"PossibleValue",480],[6,"Error",251],[5,"Error",466],[10,"Error",481],[5,"String",482],[5,"B3_128",293],[5,"B3_160",293],[5,"B3_512",293],[5,"B3_1024",293],[5,"B3_2048",293],[5,"GenericArray",483],[8,"Output",484],[5,"HashWriter",293],[10,"Update",485],[10,"Default",486],[5,"Output",444],[5,"FileFullHasher",0],[5,"FileFragmentsHasher",0],[10,"FileHash",0],[8,"Result",251]],"b":[[261,"impl-Debug-for-Error"],[262,"impl-Display-for-Error"]]}],\
["cpu_loop",{"doc":"","t":"H","n":["main"],"q":[[0,"cpu_loop"]],"d":[""],"i":[0],"f":"{{}b}","c":[],"p":[[1,"unit"]],"b":[]}],\
["demo",{"doc":"","t":"H","n":["main"],"q":[[0,"demo"]],"d":[""],"i":[0],"f":"{{}b}","c":[],"p":[[1,"unit"]],"b":[]}],\
["enc",{"doc":"","t":"CCHPGPPPPFPINNNNNNNNNNNNNNNNNNNNNNNNN","n":["cli","errors","build_cli","Err","Error","InvalidSalt","Io","Ok","PasswordHash","PasswordHashError","PasswordNotMatch","Result","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"enc"],[2,"enc::cli"],[3,"enc::errors"],[37,"clap_builder::builder::command"],[38,"core::fmt"],[39,"core::fmt"],[40,"password_hash::errors"],[41,"core::error"],[42,"core::option"],[43,"alloc::string"],[44,"core::result"],[45,"core::any"]],"d":["","","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,13,0,2,2,13,2,0,2,0,2,5,2,5,2,2,5,5,2,2,2,2,5,5,2,5,2,2,5,2,5,2,5,2,5],"f":"``{{}b}`````````{ce{}{}}000{{df}h}0{{jf}h}0{jd}{ld}{cc{}}{nd}1{nj}77{d{{Ab{A`}}}}{cAd{}}0{c{{Af{e}}}{}{}}000{cAh{}}0","c":[],"p":[[5,"Command",37],[6,"Error",3],[5,"Formatter",38],[8,"Result",38],[5,"PasswordHashError",3],[5,"Error",39],[6,"Error",40],[10,"Error",41],[6,"Option",42],[5,"String",43],[6,"Result",44],[5,"TypeId",45],[8,"Result",3]],"b":[[16,"impl-Display-for-Error"],[17,"impl-Debug-for-Error"],[18,"impl-Debug-for-PasswordHashError"],[19,"impl-Display-for-PasswordHashError"],[20,"impl-From%3CPasswordHashError%3E-for-Error"],[21,"impl-From%3CError%3E-for-Error"],[23,"impl-From%3CError%3E-for-Error"]]}],\
["file_bmp_codec",{"doc":"","t":"EECCCPPGPPPINNNNNNNNNNNNNNNNNNHHHH","n":["Error","Result","errors","grayscale_codec","rgb_codec","BmpError","Err","Error","ImageError","IoError","Ok","Result","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","init","into","source","to_string","try_from","try_into","type_id","decode","encode","decode","encode"],"q":[[0,"file_bmp_codec"],[5,"file_bmp_codec::errors"],[30,"file_bmp_codec::grayscale_codec"],[32,"file_bmp_codec::rgb_codec"],[34,"core::fmt"],[35,"core::fmt"],[36,"bmp::decoder"],[37,"image::error"],[38,"core::error"],[39,"core::option"],[40,"alloc::string"],[41,"core::result"],[42,"core::any"]],"d":["","","","","","","Contains the error value","","","","Contains the success value","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,3,15,0,3,3,15,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0],"f":"````````````{ce{}{}}0{bc{}}0{bd}{{fh}j}0{cc{}}{lf}{nf}{A`f}{{}b}8{f{{Ad{Ab}}}}{cAf{}}{c{{Ah{e}}}{}{}}0{cAj{}}{{AlAl}{{An{d}}}}000","c":[],"p":[[1,"usize"],[1,"unit"],[6,"Error",5],[5,"Formatter",34],[8,"Result",34],[5,"Error",35],[5,"BmpError",36],[6,"ImageError",37],[10,"Error",38],[6,"Option",39],[5,"String",40],[6,"Result",41],[5,"TypeId",42],[1,"str"],[8,"Result",5]],"b":[[17,"impl-Debug-for-Error"],[18,"impl-Display-for-Error"],[20,"impl-From%3CError%3E-for-Error"],[21,"impl-From%3CBmpError%3E-for-Error"],[22,"impl-From%3CImageError%3E-for-Error"]]}],\
["file_size",{"doc":"","t":"FNNNNNNONNHHHHHHHNNN","n":["Arguments","borrow","borrow_mut","deref","deref_mut","drop","from","human_readable","init","into","main","match_option","portable_fseek","portable_ftell","print_file_size","str_to_c_str","string_to_c_str","try_from","try_into","type_id"],"q":[[0,"file_size"],[20,"alloc::string"],[21,"core::result"],[22,"bczhc_lib::utils"],[23,"libc::unix"],[24,"libc::unix::linux_like::linux::gnu::b64::x86_64::not_x32"],[25,"libc::unix"],[26,"libc::unix::linux_like::linux::gnu::b64::x86_64"],[27,"core::any"]],"d":["","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6],"f":"`{ce{}{}}0{bc{}}0{bd}{cc{}}`{{}b}4{{}{{h{df}}}}{{jlf}{{h{df}}}}{{nA`Ab}Ab}{nAd}{{AfAh}{{h{df}}}}{AfAj}0{c{{h{e}}}{}{}}0{cAl{}}","c":[],"p":[[1,"usize"],[1,"unit"],[5,"String",20],[6,"Result",21],[5,"MsgPrinter",22],[5,"Arguments",0],[6,"FILE",23],[8,"c_long",24],[8,"c_int",23],[8,"off_t",25],[1,"str"],[1,"bool"],[8,"c_char",26],[5,"TypeId",27]],"b":[]}],\
["forward",{"doc":"","t":"CPPPGPPPPINNNNNNNNNNNNNNNN","n":["errors","AddressParse","Err","Errno","Error","Io","Ok","Others","ParseInt","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","from","into","source","to_string","try_from","try_into","type_id"],"q":[[0,"forward"],[1,"forward::errors"],[26,"core::fmt"],[27,"core::fmt"],[28,"std::io::error"],[29,"core::any"],[30,"alloc::boxed"],[31,"errno"],[32,"core::net::parser"],[33,"core::error"],[34,"core::option"],[35,"alloc::string"],[36,"core::result"],[37,"core::any"]],"d":["","","Contains the error value","","","","Contains the success value","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,1,15,1,0,1,15,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"``````````{ce{}{}}0{{bd}f}0{cc{}}{hb}{jb}{{{n{l}}}b}{A`b}{Abb}7{b{{Af{Ad}}}}{cAh{}}{c{{Aj{e}}}{}{}}0{cAl{}}","c":[],"p":[[6,"Error",1],[5,"Formatter",26],[8,"Result",26],[5,"ParseIntError",27],[5,"Error",28],[10,"Any",29],[5,"Box",30],[5,"Errno",31],[5,"AddrParseError",32],[10,"Error",33],[6,"Option",34],[5,"String",35],[6,"Result",36],[5,"TypeId",29],[8,"Result",1]],"b":[[12,"impl-Display-for-Error"],[13,"impl-Debug-for-Error"],[15,"impl-From%3CParseIntError%3E-for-Error"],[16,"impl-From%3CError%3E-for-Error"],[17,"impl-From%3CBox%3Cdyn+Any+%2B+Send%3E%3E-for-Error"],[18,"impl-From%3CErrno%3E-for-Error"],[19,"impl-From%3CAddrParseError%3E-for-Error"]]}],\
["fourier_series",{"doc":"","t":"JSCPGPPPPPNNHNNNNNNNNNN","n":["CPU_NUM_STRING","TEST_INPUT_DATA","cli","Boole","Integrator","LeftRectangle","RightRectangle","Simpson","Simpson38","Trapezoid","borrow","borrow_mut","build_cli","clone","clone_into","from","into","to_owned","to_possible_value","try_from","try_into","type_id","value_variants"],"q":[[0,"fourier_series"],[3,"fourier_series::cli"],[23,"clap_builder::builder::command"],[24,"clap_builder::builder::possible_value"],[25,"core::option"],[26,"core::result"],[27,"core::any"]],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,2,0,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2],"f":"``````````{ce{}{}}0{{}b}{dd}{{ce}f{}{}}{cc{}}44{d{{j{h}}}}{c{{l{e}}}{}{}}0{cn{}}{{}{{A`{d}}}}","c":[],"p":[[5,"Command",23],[6,"Integrator",3],[1,"unit"],[5,"PossibleValue",24],[6,"Option",25],[6,"Result",26],[5,"TypeId",27],[1,"slice"]],"b":[]}],\
["git_commit_time_stat",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["hash_tools",{"doc":"","t":"CHHFPPPPPPPPPPPPGFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNNNNNNNNN","n":["cli","fixed_output_hash","xof_output_hash","Args","Blake2b512","Blake2s256","Blake3","Md5","Ripemd128","Ripemd160","Ripemd256","Sha1","Sha256","Sha3_256","Sha3_512","Sha512","Subcommand","XofDigestArgs","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","command","command_for_update","fmt","fmt","fmt","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","has_subcommand","into","into","into","iter_count","length","pipe_input","raw","subcommand","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut"],"q":[[0,"hash_tools"],[3,"hash_tools::cli"],[70,"std::io::error"],[71,"std::io"],[72,"alloc::vec"],[73,"clap_builder::builder::command"],[74,"core::fmt"],[75,"core::fmt"],[76,"clap_builder"],[77,"core::result"],[78,"clap_builder::util::id"],[79,"core::option"],[80,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,12,12,12,12,12,12,12,12,12,12,12,12,0,0,9,13,9,13,12,12,9,12,13,9,12,13,9,9,9,12,13,9,12,13,9,12,13,9,12,13,9,13,12,9,12,13,9,13,9,9,9,9,12,13,9,12,13,9,12,13,9,12,13,9,12,13],"f":"`{{cb}{{h{{f{d}}}}}j}{{clb}{{h{{n{d}}}}}j}```````````````{A`A`}00000{ce{}{}}00000{{}A`}0{{AbAd}Af}{{AhAd}Af}{{AjAd}Af}{cc{}}00{Al{{B`{AbAn}}}}{Al{{B`{AhAn}}}}{Al{{B`{AjAn}}}}210{{}{{Bd{Bb}}}}0{BfBh}:::`````{c{{B`{e}}}{}{}}00000{cBj{}}00{{AbAl}{{B`{BlAn}}}}{{AhAl}{{B`{BlAn}}}}{{AjAl}{{B`{BlAn}}}}210","c":[],"p":[[1,"u64"],[1,"u8"],[1,"array"],[8,"Result",70],[10,"Read",71],[1,"usize"],[5,"Vec",72],[5,"Command",73],[5,"Args",3],[5,"Formatter",74],[8,"Result",74],[6,"Subcommand",3],[5,"XofDigestArgs",3],[5,"ArgMatches",75],[8,"Error",76],[6,"Result",77],[5,"Id",78],[6,"Option",79],[1,"str"],[1,"bool"],[5,"TypeId",80],[1,"unit"]],"b":[]}],\
["http_server",{"doc":"","t":"KKMCCMPGPPPINNNNNNNNNNNNNNNNNH","n":["CapitalizeHeader","HttpVersionAsStr","as_str","errors","server","to_capitalized","Err","Error","Io","Ok","ParseIntError","Result","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","init","into","source","to_string","try_from","try_into","type_id","run"],"q":[[0,"http_server"],[6,"http_server::errors"],[29,"http_server::server"],[30,"alloc::string"],[31,"core::fmt"],[32,"core::fmt"],[33,"core::num::error"],[34,"core::error"],[35,"core::option"],[36,"core::result"],[37,"core::any"]],"d":["","","","","","","Contains the error value","","","Contains the success value","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,1,0,0,3,17,0,7,17,7,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0],"f":"``{bd}``{fh}``````{ce{}{}}0{jc{}}0{jl}{{nA`}Ab}0{Adn}{Afn}{cc{}}{{}j}7{n{{Aj{Ah}}}}{ch{}}{c{{Al{e}}}{}{}}0{cAn{}}{{B`d}{{Bb{l}}}}","c":[],"p":[[10,"HttpVersionAsStr",0],[1,"str"],[10,"CapitalizeHeader",0],[5,"String",30],[1,"usize"],[1,"unit"],[6,"Error",6],[5,"Formatter",31],[8,"Result",31],[5,"Error",32],[5,"ParseIntError",33],[10,"Error",34],[6,"Option",35],[6,"Result",36],[5,"TypeId",37],[1,"u16"],[8,"Result",6]],"b":[[17,"impl-Display-for-Error"],[18,"impl-Debug-for-Error"],[19,"impl-From%3CError%3E-for-Error"],[20,"impl-From%3CParseIntError%3E-for-Error"]]}],\
["image_stegano_bg",{"doc":"","t":"CFNNNNNNNNNNNOOOONONNNNN","n":["cli","CliArgs","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","fmt","from","from_arg_matches","from_arg_matches_mut","group_id","image1","image1_dim","image2","image2_dim","into","output","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"image_stegano_bg"],[1,"image_stegano_bg::cli"],[24,"clap_builder::builder::command"],[25,"core::fmt"],[26,"core::fmt"],[27,"clap_builder"],[28,"core::result"],[29,"clap_builder::util::id"],[30,"core::option"],[31,"core::any"]],"d":["","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":"``{bb}0{ce{}{}}0{{}b}0{{df}h}{cc{}}{j{{n{dl}}}}0{{}{{Ab{A`}}}}````5`{c{{n{e}}}{}{}}0{cAd{}}{{dj}{{n{Afl}}}}0","c":[],"p":[[5,"Command",24],[5,"CliArgs",1],[5,"Formatter",25],[8,"Result",25],[5,"ArgMatches",26],[8,"Error",27],[6,"Result",28],[5,"Id",29],[6,"Option",30],[5,"TypeId",31],[1,"unit"]],"b":[]}],\
["image_track",{"doc":"","t":"IPSSFPSFCNNNNCNNNNNNNNNNNNCNNNNCHHNNNNNNNNHHHH","n":["AnyResult","Err","HEADER","HEAD_INFO_SIZE","ImageInfo","Ok","SECTOR_SIZE","Track","add","borrow","borrow","borrow_mut","borrow_mut","create","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","from","from","info","init","init","into","into","new","open_image","pad_sector","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","main","main","main","main"],"q":[[0,"image_track"],[42,"image_track::add"],[43,"image_track::create"],[44,"image_track::info"],[45,"image_track::new"],[46,"core::result"],[47,"serde::de"],[48,"core::fmt"],[49,"core::fmt"],[50,"std::path"],[51,"core::convert"],[52,"serde::ser"],[53,"core::any"],[54,"clap::parser::matches::arg_matches"]],"d":["","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","pad the byte size to sectors that will take place in the …","","","","","","","","","","","",""],"i":[0,11,0,0,0,11,0,0,0,2,5,2,5,0,2,5,2,5,2,5,2,5,2,5,2,5,0,2,5,2,5,0,0,0,2,5,2,5,2,5,2,5,0,0,0,0],"f":"`````````{ce{}{}}000`{bc{}}000{c{{f{d}}}h}{c{{f{j}}}h}{bl}0{{dn}A`}{{jn}A`}{cc{}}0`{{}b}088`{c{{Af{{Ad{Abd}}}}}{{Aj{Ah}}}}{AlAl}{{dc}fAn}{{jc}fAn}{c{{f{e}}}{}{}}000{cB`{}}0{Bb{{Af{l}}}}000","c":[],"p":[[1,"usize"],[5,"ImageInfo",0],[6,"Result",46],[10,"Deserializer",47],[5,"Track",0],[1,"unit"],[5,"Formatter",48],[8,"Result",48],[5,"File",49],[1,"tuple"],[8,"AnyResult",0],[5,"Path",50],[10,"AsRef",51],[1,"u64"],[10,"Serializer",52],[5,"TypeId",53],[5,"ArgMatches",54]],"b":[]}],\
["my_enc",{"doc":"","t":"HHHHH","n":["decrypt_to","derive_key","encrypt_to","main","read_salt"],"q":[[0,"my_enc"],[5,"aes::autodetect"],[6,"std::io::error"],[7,"std::io"],[8,"std::io"],[9,"typenum::generated::consts"],[10,"generic_array"],[11,"enc::errors"],[12,"core::error"],[13,"alloc::boxed"],[14,"core::result"]],"d":["","","","",""],"i":[0,0,0,0,0],"f":"{{bce}{{f{d}}}hj}{{ln}{{Af{{Ad{A`Ab}}}}}}1{{}{{Al{d{Aj{Ah}}}}}}{c{{Af{n}}}h}","c":[],"p":[[5,"Aes256",5],[1,"unit"],[8,"Result",6],[10,"Read",7],[10,"Write",7],[1,"str"],[5,"SaltString",8],[1,"u8"],[8,"U32",9],[5,"GenericArray",10],[8,"Result",11],[10,"Error",12],[5,"Box",13],[6,"Result",14]],"b":[]}],\
["my_ncat",{"doc":"","t":"H","n":["main"],"q":[[0,"my_ncat"],[1,"ncat::errors"]],"d":[""],"i":[0],"f":"{{}{{d{b}}}}","c":[],"p":[[1,"unit"],[8,"Result",1]],"b":[]}],\
["ncat",{"doc":"","t":"CCCHPPGPPPPINNNNNNNNNNNNNNNNNNNH","n":["connect","errors","listen","connect","AddressParse","Err","Error","Io","Ok","ParseInt","Poll","Result","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","init","into","source","to_string","try_from","try_into","type_id","listen"],"q":[[0,"ncat"],[3,"ncat::connect"],[4,"ncat::errors"],[31,"ncat::listen"],[32,"core::fmt"],[33,"core::fmt"],[34,"std::io::error"],[35,"core::net::parser"],[36,"errno"],[37,"core::error"],[38,"core::option"],[39,"alloc::string"],[40,"core::result"],[41,"core::any"]],"d":["","","","","","Contains the error value","","","Contains the success value","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,5,3,0,5,3,5,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0],"f":"```{b{{f{d}}}}````````{ce{}{}}0{hc{}}0{hd}{{jl}n}0{cc{}}{A`j}{Abj}{Adj}{Afj}{{}h}9{j{{Aj{Ah}}}}{cAl{}}{c{{An{e}}}{}{}}0{cB`{}}{Bb{{f{d}}}}","c":[],"p":[[1,"str"],[1,"unit"],[8,"Result",4],[1,"usize"],[6,"Error",4],[5,"Formatter",32],[8,"Result",32],[5,"ParseIntError",33],[5,"Error",34],[5,"AddrParseError",35],[5,"Errno",36],[10,"Error",37],[6,"Option",38],[5,"String",39],[6,"Result",40],[5,"TypeId",41],[1,"u16"]],"b":[[17,"impl-Debug-for-Error"],[18,"impl-Display-for-Error"],[20,"impl-From%3CParseIntError%3E-for-Error"],[21,"impl-From%3CError%3E-for-Error"],[22,"impl-From%3CAddrParseError%3E-for-Error"],[23,"impl-From%3CErrno%3E-for-Error"]]}],\
["network_monitor",{"doc":"","t":"CHH","n":["cli","interfaces_list","build_cli"],"q":[[0,"network_monitor"],[2,"network_monitor::cli"],[3,"alloc::string"],[4,"alloc::vec"],[5,"clap_builder::builder::command"]],"d":["","",""],"i":[0,0,0],"f":"`{{}{{d{b}}}}{{}f}","c":[],"p":[[5,"String",3],[5,"Vec",4],[5,"Command",5]],"b":[]}],\
["phone_transfer",{"doc":"","t":"PSGPPNNNNNCNNNNNCCCNNNPPGPPPPPPPPIPPPNNNNNNNNNNNNNNNNNNNHHHHHH","n":["File","HEADER","Mark","Tar","Text","borrow","borrow_mut","deref","deref_mut","drop","errors","from","from_i64","from_u64","init","into","qr","receive","send","try_from","try_into","type_id","AddressParse","Err","Error","InvalidCharset","InvalidHeader","InvalidMark","InvalidPort","InvalidSelect","Io","Ok","ReadDir","Result","UnknownFilename","UnsupportedFileType","Utf8","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","init","into","source","to_string","try_from","try_into","type_id","print_addr_qr","main","main","send_dir","send_file","send_text"],"q":[[0,"phone_transfer"],[22,"phone_transfer::errors"],[56,"phone_transfer::qr"],[57,"phone_transfer::receive"],[58,"phone_transfer::send"],[62,"core::option"],[63,"core::result"],[64,"core::any"],[65,"core::fmt"],[66,"core::fmt"],[67,"walkdir::error"],[68,"core::net::parser"],[69,"core::str::error"],[70,"core::error"],[71,"alloc::string"],[72,"clap::parser::matches::arg_matches"],[73,"std::io"],[74,"std::path"],[75,"core::convert"],[76,"std::io"]],"d":["","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","Contains the error value","","","","","","","","Contains the success value","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[4,0,0,4,4,4,4,4,4,4,0,4,4,4,4,4,0,0,0,4,4,4,9,19,0,9,9,9,9,9,9,19,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0,0],"f":"`````{ce{}{}}0{bc{}}0{bd}`{cc{}}{f{{j{h}}}}{l{{j{h}}}}{{}b}6```{c{{n{e}}}{}{}}0{cA`{}}```````````````88776{{AbAd}Af}0{AhAb}{AjAb}{AlAb}9{AnAb}7={Ab{{j{B`}}}}{cBb{}}887{Bd{{Bf{d}}}}{Bh{{Bf{d}}}}0{{ce}{{Bf{d}}}Bj{{Bn{Bl}}}}{{ceg}{{Bf{d}}}BjC`{{Bn{Cb}}}}{{cCd}{{Bf{d}}}Bj}","c":[],"p":[[1,"usize"],[1,"unit"],[1,"i64"],[6,"Mark",0],[6,"Option",62],[1,"u64"],[6,"Result",63],[5,"TypeId",64],[6,"Error",22],[5,"Formatter",65],[8,"Result",65],[5,"Error",66],[5,"Error",67],[5,"AddrParseError",68],[5,"Utf8Error",69],[10,"Error",70],[5,"String",71],[1,"u16"],[8,"Result",22],[5,"ArgMatches",72],[10,"Write",73],[5,"Path",74],[10,"AsRef",75],[10,"Read",73],[5,"OsStr",76],[1,"str"]],"b":[[42,"impl-Debug-for-Error"],[43,"impl-Display-for-Error"],[44,"impl-From%3CError%3E-for-Error"],[45,"impl-From%3CError%3E-for-Error"],[46,"impl-From%3CAddrParseError%3E-for-Error"],[48,"impl-From%3CUtf8Error%3E-for-Error"]]}],\
["regex",{"doc":"","t":"GPPPFKGIPPPFPPNNNNNNNNMNNNNNNNNNNNHNNOOMNNNNNNNNNNNNNN","n":["Engine","Pcre","Pcre","Pcre","PcreRegex","Regex","RetErr","RetErrType","Rust","Rust","Rust","RustRegex","Text","Text","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capture","capture","capture","fmt","from","from","from","from","into","into","into","into","main","new","new","regex","regex","test","test","test","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"regex"],[54,"alloc::string"],[55,"alloc::vec"],[56,"core::fmt"],[57,"core::fmt"],[58,"pcre2::error"],[59,"core::result"],[60,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,17,18,7,0,0,0,0,17,18,7,0,17,7,5,6,18,7,5,6,18,7,1,5,6,7,5,6,18,7,5,6,18,7,0,5,6,5,6,1,5,6,5,6,18,7,5,6,18,7,5,6,18,7],"f":"``````````````{ce{}{}}0000000{{bd}{{h{{h{f}}}}}}{{jd}{{h{{h{f}}}}}}{{ld}{{h{{h{f}}}}}}{{{n{ceg}}A`}AbAdAdAd}{cc{}}0005555{{}{{Al{Af{n{AhAjf}}}}}}{d{{Al{jAh}}}}{d{{Al{lAj}}}}``{{bd}An}{{jd}An}{{ld}An}{c{{Al{e}}}{}{}}0000000{cB`{}}000","c":[],"p":[[10,"Regex",0],[1,"str"],[5,"String",54],[5,"Vec",55],[5,"RustRegex",0],[5,"PcreRegex",0],[6,"RetErr",0],[5,"Formatter",56],[8,"Result",56],[10,"Debug",56],[1,"unit"],[6,"Error",57],[5,"Error",58],[6,"Result",59],[1,"bool"],[5,"TypeId",60],[8,"RetErrType",0],[6,"Engine",0]],"b":[]}],\
["rev_read",{"doc":"","t":"H","n":["main"],"q":[[0,"rev_read"]],"d":[""],"i":[0],"f":"{{}b}","c":[],"p":[[1,"unit"]],"b":[]}],\
["reverse",{"doc":"","t":"PPGNNNNNNNNHHNNN","n":["All","Line","ReverseMode","borrow","borrow_mut","deref","deref_mut","drop","from","init","into","main","reverse_string","try_from","try_into","type_id"],"q":[[0,"reverse"],[16,"alloc::string"],[17,"core::result"],[18,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","",""],"i":[8,8,0,8,8,8,8,8,8,8,8,0,0,8,8,8],"f":"```{ce{}{}}0{bc{}}0{bd}{cc{}}{{}b}4{{}{{h{df}}}}{{jl}f}{c{{h{e}}}{}{}}0{cn{}}","c":[],"p":[[1,"usize"],[1,"unit"],[5,"String",16],[6,"Result",17],[1,"str"],[1,"bool"],[5,"TypeId",18],[6,"ReverseMode",0]],"b":[]}],\
["send_email",{"doc":"","t":"FFFONNNNNNCONNNOONNNOOOOONNNNNNNNNOH","n":["Account","Config","Message","body","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cli","credentials","from","from","from","from","from","into","into","into","password","smtp","smtp","subject","to","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","username","build_cli"],"q":[[0,"send_email"],[35,"send_email::cli"],[36,"core::result"],[37,"core::any"],[38,"clap_builder::builder::command"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,4,5,4,6,5,4,6,0,6,5,4,6,5,4,5,4,6,5,5,6,4,4,5,4,6,5,4,6,5,4,6,5,0],"f":"````{ce{}{}}00000``{cc{}}00``111`````{c{{b{e}}}{}{}}00000{cd{}}00`{{}f}","c":[],"p":[[6,"Result",36],[5,"TypeId",37],[5,"Command",38],[5,"Message",0],[5,"Config",0],[5,"Account",0]],"b":[]}],\
["serial_cat",{"doc":"","t":"CPGPPPIPNNNNNNNNNNNNN","n":["errors","Err","Error","IllegalArgument","Io","Ok","Result","Serial","borrow","borrow_mut","fmt","fmt","from","from","from","into","source","to_string","try_from","try_into","type_id"],"q":[[0,"serial_cat"],[1,"serial_cat::errors"],[21,"core::fmt"],[22,"core::fmt"],[23,"serialport"],[24,"core::error"],[25,"core::option"],[26,"alloc::string"],[27,"core::result"],[28,"core::any"]],"d":["","Contains the error value","","","","Contains the success value","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,11,0,1,1,11,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":"````````{ce{}{}}0{{bd}f}0{hb}{jb}{cc{}}4{b{{n{l}}}}{cA`{}}{c{{Ab{e}}}{}{}}0{cAd{}}","c":[],"p":[[6,"Error",1],[5,"Formatter",21],[8,"Result",21],[5,"Error",22],[5,"Error",23],[10,"Error",24],[6,"Option",25],[5,"String",26],[6,"Result",27],[5,"TypeId",28],[8,"Result",1]],"b":[[10,"impl-Display-for-Error"],[11,"impl-Debug-for-Error"],[12,"impl-From%3CError%3E-for-Error"],[13,"impl-From%3CError%3E-for-Error"]]}],\
["shuffle_string",{"doc":"","t":"PPPPPGGPNNNNNNNNHHHNNNNNNNN","n":["All","Help","InvalidArgumentCount","IoError","Line","MsgType","ShuffleMode","UnknownOption","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","main","show_msg","shuffle_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"shuffle_string"],[27,"alloc::string"],[28,"core::result"],[29,"core::any"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[7,4,4,4,7,0,0,4,4,7,4,7,4,7,4,7,0,0,0,4,7,4,7,4,7,4,7],"f":"````````{ce{}{}}000{cc{}}011{{}{{f{bd}}}}{h{{f{bd}}}}{jd}{c{{f{e}}}{}{}}000{cl{}}066","c":[],"p":[[1,"unit"],[5,"String",27],[6,"Result",28],[6,"MsgType",0],[1,"str"],[5,"TypeId",29],[6,"ShuffleMode",0]],"b":[]}],\
["stdin_size",{"doc":"","t":"PPGPNNNNHHNNN","n":["Help","InvalidArgumentCount","MsgType","UnknownOption","borrow","borrow_mut","from","into","main","show_msg","try_from","try_into","type_id"],"q":[[0,"stdin_size"],[13,"alloc::string"],[14,"core::result"],[15,"core::any"]],"d":["","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[4,4,0,4,4,4,4,4,0,0,4,4,4],"f":"````{ce{}{}}0{cc{}}1{{}{{f{bd}}}}{h{{f{bd}}}}{c{{f{e}}}{}{}}0{cj{}}","c":[],"p":[[1,"unit"],[5,"String",13],[6,"Result",14],[6,"MsgType",0],[5,"TypeId",15]],"b":[]}],\
["stream_recorder",{"doc":"","t":"CHHFNNNNNNNONNNNNOOOONNNNN","n":["cli","record","replay","Args","augment_args","augment_args_for_update","borrow","borrow_mut","command","command_for_update","fmt","forward","from","from_arg_matches","from_arg_matches_mut","group_id","into","no_delay","path","replay","skip","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"stream_recorder"],[3,"stream_recorder::cli"],[26,"std::path"],[27,"anyhow"],[28,"clap_builder::builder::command"],[29,"core::fmt"],[30,"core::fmt"],[31,"clap_builder"],[32,"core::result"],[33,"clap_builder::util::id"],[34,"core::option"],[35,"core::any"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":"`{{bd}{{h{f}}}}{j{{h{f}}}}`{ll}0{ce{}{}}0{{}l}0{{jn}A`}`{cc{}}{Ab{{Af{jAd}}}}0{{}{{Aj{Ah}}}}5````{c{{Af{e}}}{}{}}0{cAl{}}{{jAb}{{Af{fAd}}}}0","c":[],"p":[[5,"Path",26],[1,"bool"],[1,"unit"],[8,"Result",27],[5,"Args",3],[5,"Command",28],[5,"Formatter",29],[8,"Result",29],[5,"ArgMatches",30],[8,"Error",31],[6,"Result",32],[5,"Id",33],[6,"Option",34],[5,"TypeId",35]],"b":[]}],\
["string_purify",{"doc":"","t":"H","n":["main"],"q":[[0,"string_purify"],[1,"std::io::error"]],"d":[""],"i":[0],"f":"{{}{{d{b}}}}","c":[],"p":[[1,"unit"],[8,"Result",1]],"b":[]}],\
["task_notify",{"doc":"","t":"CCCHHH","n":["cli","run","watch","build_cli","main","main"],"q":[[0,"task_notify"],[3,"task_notify::cli"],[4,"task_notify::run"],[5,"task_notify::watch"],[6,"clap_builder::builder::command"],[7,"clap_builder::parser::matches::arg_matches"],[8,"std::process"],[9,"anyhow"]],"d":["","","","","",""],"i":[0,0,0,0,0,0],"f":"```{{}b}{d{{h{f}}}}{d{{h{j}}}}","c":[],"p":[[5,"Command",6],[5,"ArgMatches",7],[5,"ExitStatus",8],[8,"Result",9],[1,"unit"]],"b":[]}],\
["tcp_crypto_tunnel",{"doc":"","t":"JSJCCHHCHHCHHPGPPPINNNNNNNNNNNNH","n":["KEY","KEY_LEN","KEY_REF","cli","client","crypto_interact_two_streams","derive_key","errors","generic_main","prompt_password","server","build_cli","main","Err","Error","Io","Ok","PasswordNotMatch","Result","borrow","borrow_mut","fmt","fmt","from","from","into","source","to_string","try_from","try_into","type_id","main"],"q":[[0,"tcp_crypto_tunnel"],[11,"tcp_crypto_tunnel::cli"],[12,"tcp_crypto_tunnel::client"],[13,"tcp_crypto_tunnel::errors"],[31,"tcp_crypto_tunnel::server"],[32,"std::net::tcp"],[33,"alloc::string"],[34,"clap_builder::builder::command"],[35,"clap_builder::parser::matches::arg_matches"],[36,"core::fmt"],[37,"core::fmt"],[38,"core::error"],[39,"core::option"],[40,"core::result"],[41,"core::any"]],"d":["","","","","","","","","","","","","","Contains the error value","","","Contains the success value","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,11,3,11,0,11,11,11,11,11,11,11,11,11,11,11,11,0],"f":"`````{{bb}{{f{d}}}}{h{{l{j}}}}`{{nA`}{{f{d}}}}{{}{{f{n}}}}`{{}Ab}{Ad{{f{d}}}}``````{ce{}{}}0{{AfAh}Aj}0{cc{}}{AlAf}3{Af{{B`{An}}}}{cn{}}{c{{Bb{e}}}{}{}}0{cBd{}}8","c":[],"p":[[5,"TcpStream",32],[1,"unit"],[8,"Result",13],[1,"str"],[1,"u8"],[1,"array"],[5,"String",33],[1,"u16"],[5,"Command",34],[5,"ArgMatches",35],[6,"Error",13],[5,"Formatter",36],[8,"Result",36],[5,"Error",37],[10,"Error",38],[6,"Option",39],[6,"Result",40],[5,"TypeId",41]],"b":[[21,"impl-Debug-for-Error"],[22,"impl-Display-for-Error"]]}],\
["tohr",{"doc":"","t":"HH","n":["main","print_bytes"],"q":[[0,"tohr"]],"d":["",""],"i":[0,0],"f":"{{}b}{db}","c":[],"p":[[1,"unit"],[1,"str"]],"b":[]}],\
["transfer",{"doc":"","t":"PGPPPPPGPFPPPPPPIPPPPPPGPPPPNNNNNNNNHHHCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCHHHCCNNNNNNNNNNNNNHHHHHHHH","n":["CannotGetHomeDir","Configs","DestinationIP","DigestCheckError","Directory","End","Err","Error","File","Header","IOError","InvalidHeader","InvalidIpv4","InvalidPort","InvalidType","InvalidUTF8","MyResult","NoConfig","NoConfigKey","Ok","Port","Stdin","String","Type","UnexpectedEOF","UnknownSubcommand","Unsupported","Utf8Error","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_option","compute_sha1","compute_sha1_with_str","config","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","init","init","init","init","into","into","into","into","key","lib","make_header","parse_port_str","read_header","receive","send","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value_of","run","read_config_file","search_config","search_config_index","split_ipv4_string","write_config_file","run","run"],"q":[[0,"transfer"],[90,"transfer::config"],[91,"transfer::lib"],[96,"transfer::receive"],[97,"transfer::send"],[98,"core::option"],[99,"core::fmt"],[100,"core::fmt"],[101,"std::io::error"],[102,"std::io"],[103,"core::result"],[104,"core::any"],[105,"clap::args::arg_matches"],[106,"alloc::string"]],"d":["","","","","","","Contains the error value","","","","","","","","","","","","","Contains the success value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[2,0,14,2,10,10,3,0,10,0,2,2,2,2,2,2,0,2,2,3,14,10,2,0,2,2,2,2,10,13,2,14,10,13,2,14,0,0,0,0,10,13,2,14,10,13,2,14,10,13,2,14,10,13,2,14,10,13,2,2,2,14,10,13,2,14,10,13,2,14,14,0,0,0,0,0,0,10,13,2,14,10,13,2,14,10,13,2,14,14,0,0,0,0,0,0,0,0],"f":"````````````````````````````{ce{}{}}0000000{{{b{c}}d}{{f{c}}}{}}{{{j{h}}}{{l{h}}}}{{{j{h}}n}{{l{h}}}}`{A`c{}}0000000{A`Ab}000{{AdAf}Ah}{{AjAf}Ah}{{dAf}Ah}{{AlAf}Ah}{cc{}}00{And}{B`d}2{{}A`}000===={Aln}`{Ad{{l{h}}}}{n{{f{Bb}}}}{c{{f{Aj}}}Bd}``{c{{Bf{e}}}{}{}}0000000{cBh{}}000{n{{b{Al}}}}{Bj{{f{Ab}}}}{{}{{f{{C`{{Bn{BlBl}}}}}}}}{{{C`{{Bn{BlBl}}}}n}{{b{Bl}}}}{{{j{{Bn{BlBl}}}}n}{{b{A`}}}}{n{{b{{Bn{hhhh}}}}}}{{{j{{Bn{BlBl}}}}}{{f{Ab}}}}55","c":[],"p":[[6,"Option",98],[6,"Error",0],[8,"MyResult",0],[1,"u8"],[1,"slice"],[1,"array"],[1,"str"],[1,"usize"],[1,"unit"],[6,"Type",0],[5,"Formatter",99],[8,"Result",99],[5,"Header",0],[6,"Configs",0],[5,"FromUtf8Error",100],[5,"Error",101],[1,"u16"],[10,"Read",102],[6,"Result",103],[5,"TypeId",104],[5,"ArgMatches",105],[5,"String",100],[1,"tuple"],[5,"Vec",106]],"b":[[59,"impl-From%3CFromUtf8Error%3E-for-Error"],[60,"impl-From%3CError%3E-for-Error"]]}],\
["ucd_parser",{"doc":"","t":"PGPNNCNNNHNNNH","n":["Parse","Progress","StatAttributes","borrow","borrow_mut","cli","fmt","from","into","parse_xml","try_from","try_into","type_id","build_cli"],"q":[[0,"ucd_parser"],[13,"ucd_parser::cli"],[14,"core::fmt"],[15,"core::fmt"],[16,"std::path"],[17,"core::convert"],[18,"core::ops::function"],[19,"core::result"],[20,"core::any"],[21,"clap_builder::builder::command"]],"d":["","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[1,0,1,1,1,0,1,1,1,0,1,1,1,0],"f":"```{ce{}{}}0`{{bd}f}{cc{}}2{{ceg}{{j{h}}}{{n{l}}}{{n{l}}}{{Ab{A`b}}}}{c{{Ad{e}}}{}{}}0{cAf{}}{{}Ah}","c":[],"p":[[6,"Progress",0],[5,"Formatter",14],[8,"Result",14],[1,"unit"],[8,"Result",15],[5,"Path",16],[10,"AsRef",17],[1,"u32"],[10,"Fn",18],[6,"Result",19],[5,"TypeId",20],[5,"Command",21]],"b":[]}],\
["unicode_name",{"doc":"","t":"JFFFONNNNNNOOHOHCNNNNNNNONNNNNNNNNNNOH","n":["CONFIG","CharInfo","CharInfoIter","Config","block","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_offset","char","char_encoded_string","char_offset","char_utf32_string","cli","from","from","from","into","into","into","into_iter","name","new","next","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ucd_database","build_cli"],"q":[[0,"unicode_name"],[37,"unicode_name::cli"],[38,"alloc::string"],[39,"std::io"],[40,"core::option"],[41,"core::result"],[42,"core::any"],[43,"clap_builder::builder::command"]],"d":["","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,9,3,9,10,3,9,10,9,9,0,9,0,0,3,9,10,3,9,10,3,9,3,3,3,9,10,3,9,10,3,9,10,10,0],"f":"`````{ce{}{}}00000``{bd}`0`{cc{}}002222`{c{{f{c}}}h}{{{f{c}}}{{j{e}}}h{}}{c{{l{e}}}{}{}}00000{cn{}}00`{{}A`}","c":[],"p":[[1,"char"],[5,"String",38],[5,"CharInfoIter",0],[10,"BufRead",39],[6,"Option",40],[6,"Result",41],[5,"TypeId",42],[5,"Command",43],[5,"CharInfo",0],[5,"Config",0]],"b":[]}],\
["utf_converter",{"doc":"","t":"FNNNNNNNONHNONNNNNNNNNHHHHH","n":["Main","borrow","borrow_mut","deref","deref_mut","drop","from","init","input_stream","into","main","new","output_stream","process_utf16_input_machine_endianness","process_utf16_input_reversed_machine_endianness","process_utf32_input_machine_endianness","process_utf32_input_reversed_machine_endianness","process_utf8_input","run","try_from","try_into","type_id","unicode_to_utf16_machine_endianness","unicode_to_utf16_reversed_machine_endianness","unicode_to_utf32_machine_endianness","unicode_to_utf32_reversed_machine_endianness","unicode_to_utf8"],"q":[[0,"utf_converter"],[27,"alloc::string"],[28,"core::result"],[29,"core::any"]],"d":["","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","returns: bytes size","returns: bytes size","","","returns: bytes size"],"i":[0,5,5,5,5,5,5,5,5,5,0,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0],"f":"`{ce{}{}}0{bc{}}0{bd}{cc{}}{{}b}`4{{}{{h{df}}}}{{}j}`{jd}0000{j{{h{df}}}}{c{{h{e}}}{}{}}0{cl{}}{{n{Ab{A`}}}b}0000","c":[],"p":[[1,"usize"],[1,"unit"],[5,"String",27],[6,"Result",28],[5,"Main",0],[5,"TypeId",29],[1,"u32"],[1,"u8"],[1,"slice"]],"b":[]}],\
["wav_fourier_series",{"doc":"","t":"PPFGFPNNNNNNCNNNHNNNNNNONNNNHNNNNNNNONNNHOOONHNNNNNNNNNH","n":["A2A","A2T","Config","Mode","SeriesCoefficient","T2A","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cli","clone","clone_into","default","definite_integral_rayon","deref","deref","deref","deref_mut","deref_mut","deref_mut","dest","drop","drop","drop","fmt","fourier_series_evaluate","from","from","from","from_str","init","init","init","integral_segments_1s","into","into","into","linear_interpolate","mode","series_n","src","to_owned","trig_fourier_series_calc","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","build_cli"],"q":[[0,"wav_fourier_series"],[55,"wav_fourier_series::cli"],[56,"core::ops::function"],[57,"core::marker"],[58,"core::marker"],[59,"core::fmt"],[60,"alloc::vec"],[61,"core::marker"],[62,"clap_builder::builder::command"]],"d":["","","","","a_n, b_n","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[15,15,0,0,0,15,21,15,1,21,15,1,0,1,1,1,0,21,15,1,21,15,1,21,21,15,1,1,0,21,15,1,15,21,15,1,21,21,15,1,0,21,21,21,1,0,21,15,1,21,15,1,21,15,1,0],"f":"``````{ce{}{}}00000`{bb}{{ce}d{}{}}{{}b}{{c{h{ff}}j}f{{n{f}{{l{f}}}}A`Ab}}{Adc{}}00000`{Add}00{{bAf}Ah}{{{Aj{b}}ff}f}{cc{}}00{Al{{B`{Anc}}}{}}{{}Ad}00`;;;{{fff}f}```<{{cfjj}{{Bb{b}}}{{n{f}{{l{f}}}}AbA`Bd}}{c{{B`{e}}}{}{}}00000{cBf{}}00{{}Bh}","c":[],"p":[[5,"SeriesCoefficient",0],[1,"unit"],[1,"f64"],[1,"tuple"],[1,"u32"],[17,"Output"],[10,"Fn",56],[10,"Send",57],[10,"Sync",57],[1,"usize"],[5,"Formatter",58],[8,"Result",58],[1,"slice"],[1,"str"],[6,"Mode",0],[6,"Result",59],[5,"Vec",60],[10,"Copy",57],[5,"TypeId",61],[5,"Command",62],[5,"Config",0]],"b":[]}],\
["wrap",{"doc":"","t":"H","n":["main"],"q":[[0,"wrap"]],"d":[""],"i":[0],"f":"{{}b}","c":[],"p":[[1,"unit"]],"b":[]}],\
["x11_event_monitor",{"doc":"","t":"PPFGJPPPPPNNNNCNNNNNHNNNNNNNNOOOOOOOOOOOOOOOOOH","n":["Button","Clipboard","Event","EventType","JSON_FLAG","KeyPress","KeyRelease","MouseMotion","MouseWheel","Selection","borrow","borrow","borrow_mut","borrow_mut","cli","from","from","from","into","into","print_event","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","data","data","escaped","escaped","name","name","name","scancode","scancode","text","text","x","x","x_delta","y","y","y_delta","build_cli"],"q":[[0,"x11_event_monitor"],[29,"x11_event_monitor::EventType"],[46,"x11_event_monitor::cli"],[47,"core::result"],[48,"serde::ser"],[49,"core::any"],[50,"clap_builder::builder::command"]],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,1,0,0,0,1,1,1,1,1,2,1,2,1,0,2,2,1,2,1,0,2,1,2,1,2,1,2,1,8,9,8,9,10,11,12,10,11,8,9,13,12,14,13,12,14,0],"f":"``````````{ce{}{}}000`{bd}{cc{}}022{df}{{dc}hj}{{bc}hj}{c{{h{e}}}{}{}}000{cl{}}0`````````````````{{}n}","c":[],"p":[[6,"EventType",0],[5,"Event",0],[1,"unit"],[6,"Result",47],[10,"Serializer",48],[5,"TypeId",49],[5,"Command",50],[15,"Clipboard",29],[15,"Selection",29],[15,"KeyPress",29],[15,"KeyRelease",29],[15,"Button",29],[15,"MouseMotion",29],[15,"MouseWheel",29]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
